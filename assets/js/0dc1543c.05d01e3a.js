"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[649],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return a?n.createElement(g,o(o({ref:t},d),{},{components:a})):n.createElement(g,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},66941:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),o=["components"],s={},l="Backward compatibility",c={unversionedId:"reference/backward-compatibility",id:"reference/backward-compatibility",title:"Backward compatibility",description:"We aim to keep Darklang's behavior consistent and backwards compatible, in order",source:"@site/docs/reference/backward-compatibility.md",sourceDirName:"reference",slug:"/reference/backward-compatibility",permalink:"/reference/backward-compatibility",draft:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs/reference/backward-compatibility.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Terms of Service / SLA",permalink:"/reference/terms-of-service"},next:{title:"Desktop Client",permalink:"/reference/desktop-client"}},d={},p=[{value:"Serialized Darklang values",id:"serialized-darklang-values",level:2},{value:"Dictionaries and Database ordering",id:"dictionaries-and-database-ordering",level:2},{value:"Unicode",id:"unicode",level:2},{value:"Language/framework behavior",id:"languageframework-behavior",level:2},{value:"HTTP / Transport",id:"http--transport",level:2},{value:"Timeouts",id:"timeouts",level:2},{value:"Private APIs",id:"private-apis",level:2}],u={toc:p};function m(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"backward-compatibility"},"Backward compatibility"),(0,i.kt)("p",null,"We aim to keep Darklang's behavior consistent and backwards compatible, in order\nto prevent your programs from changing without your knowledge. Sometimes cannot\nachieve this due to the underlying technology (e.g. HTTP servers and proxies,\nJSON parsers/serializers, etc) that we are built-on top of."),(0,i.kt)("h2",{id:"serialized-darklang-values"},"Serialized Darklang values"),(0,i.kt)("p",null,"Darklang serialized values appear in HTTP responses, in functions like\n",(0,i.kt)("inlineCode",{parentName:"p"},"toString")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Dict::toJSON"),", and are sent to servers using ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpClient::"),"\nfunctions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Darklang may change the formatting of values as they are serialized to users.\nTypically, we will only do this to correct incorrect behavior.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Darklang tries to generate standard JSON. We don't always, and where we\ngenerate non-standard JSON, we may switch to generating more standard JSON.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We may switch the format of JSON (indentation, spacing, etc), at any point to\nmake it prettier.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Darklang serializes integers to JSON as integers, even when they are larger\nthan standard JSON values.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Darklang does not promise to parse non-standard JSON (it may do so in some\ncases, please do not rely on this). Where Darklang does parse non-standard\nJSON, it may stop doing so without warning."))),(0,i.kt)("h2",{id:"dictionaries-and-database-ordering"},"Dictionaries and Database ordering"),(0,i.kt)("p",null,"When fetching lists of data from databases, or converting dictionaries or sets\nto lists, we make no promises as to the ordering of values, and may change them\nwithout warning."),(0,i.kt)("h2",{id:"unicode"},"Unicode"),(0,i.kt)("p",null,"Unicode is a moving standard, and Darklang strings will upgrade behind the\nscenes based on the latest standard. The changes will not necessarily happen in\nbackwards compatible ways."),(0,i.kt)("h2",{id:"languageframework-behavior"},"Language/framework behavior"),(0,i.kt)("p",null,"Error messages in Darklang may change at any time. We recommend that you do not\nuse Darklang error messages as user-facing values, or if you do, set\nexpectations that they may change."),(0,i.kt)("h2",{id:"http--transport"},"HTTP / Transport"),(0,i.kt)("p",null,"Darklang may move to newer version of HTTP (HTTP/2, HTTP3) without warning and\nwithout maintaining exact HTTP/1.1 compatibility."),(0,i.kt)("h2",{id:"timeouts"},"Timeouts"),(0,i.kt)("p",null,"Not all parts of Darklang have timeouts, but we may add or change timeouts to\nmake the service run better."),(0,i.kt)("h2",{id:"private-apis"},"Private APIs"),(0,i.kt)("p",null,"Darklang's APIs (such as those used in the editor) are private and may change at\nany time. Feel free to use them, but do not rely on them in any way. If you wish\nto build on them, please contact us and we may be able to find ways to help."))}m.isMDXComponent=!0}}]);