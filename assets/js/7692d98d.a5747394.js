"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4637],{6364:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>r});var i=s(85893),t=s(11151);const a={id:"functional-aspects",title:"Functional Aspects",sidebar_label:"Functional Aspects"},o=void 0,c={id:"discussion/functional-aspects",title:"Functional Aspects",description:"Implicit Returns",source:"@site/docs-classic/discussion/functional-aspects.md",sourceDirName:"discussion",slug:"/discussion/functional-aspects",permalink:"/discussion/functional-aspects",draft:!1,unlisted:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs-classic/discussion/functional-aspects.md",tags:[],version:"current",frontMatter:{id:"functional-aspects",title:"Functional Aspects",sidebar_label:"Functional Aspects"},sidebar:"docs",previous:{title:"Unique Aspects",permalink:"/discussion/unique-aspects"},next:{title:"When to use Darklang",permalink:"/discussion/when-dark"}},l={},r=[{value:"Implicit Returns",id:"implicit-returns",level:2},{value:"Statements",id:"statements",level:2},{value:"Pipelines",id:"pipelines",level:2},{value:"Overview",id:"overview",level:3},{value:"How to Pipe",id:"how-to-pipe",level:3},{value:"Indentation Tip",id:"indentation-tip",level:3},{value:"List::Map",id:"listmap",level:2},{value:"Tips",id:"tips",level:3},{value:"Blocks (lambdas, anonymous functions)",id:"blocks-lambdas-anonymous-functions",level:2},{value:"Match",id:"match",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"implicit-returns",children:"Implicit Returns"}),"\n",(0,i.jsx)(n.p,{children:"Most languages, especially Javascript, are imperative: you tell it to do one\nthing, then do another thing. So whenever you have code, you can add more code\nbelow it to do more stuff."}),"\n",(0,i.jsxs)(n.p,{children:['Darklang uses "implicit returns" (somewhat similar to Ruby, CoffeeScript,\nHaskell and Rust). The value of an expression is that last value in that\nexpression. So in the "hello world" example, you don\'t write\n',(0,i.jsx)(n.code,{children:'return "hello world"'}),", just ",(0,i.jsx)(n.code,{children:'"hello world"'})," is enough."]}),"\n",(0,i.jsx)(n.p,{children:"A handler or function will return the result of the last expression within it.\nThe return value of an expression is shown below the handler. If the last\nexpression is blank, Darklang will return a 500 error."}),"\n",(0,i.jsxs)(n.p,{children:["You can see some examples are shown here:\n",(0,i.jsx)(n.a,{href:"https://darklang.com/a/sample-returns",children:"https://darklang.com/a/sample-returns"})]}),"\n",(0,i.jsx)(n.p,{children:"Other computation (side effects) can be done using a statement."}),"\n",(0,i.jsx)(n.h2,{id:"statements",children:"Statements"}),"\n",(0,i.jsxs)(n.p,{children:["If you wish to use a function for side-effect (like ",(0,i.jsx)(n.code,{children:"DB::set"})," or ",(0,i.jsx)(n.code,{children:"emit"}),") then\nyou can put it on the right hand side of a ",(0,i.jsx)(n.code,{children:"let"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Darklang does not yet support statements without the extra ",(0,i.jsx)(n.code,{children:"let"}),". When you hit\n\u201center\u201d at the end of a line that has a return value, we assume you want to make\na new expression. Since that would be the last expression (and returned), we\nwill automatically add the ",(0,i.jsx)(n.code,{children:"let _ ="})," to the expression for you."]}),"\n",(0,i.jsx)(n.h2,{id:"pipelines",children:"Pipelines"}),"\n",(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["In Darklang, pipelines make code more readable. Pipelines are similar to method\nchaining in OO languages, and pipes in Bash. Rather than calling functions with\ntheir parameters, you pass the previous value into the ",(0,i.jsx)(n.strong,{children:"first"})," parameter of an\nexpression:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/image2.gif",src:s(6962).Z+"",width:"600",height:"224"})}),"\n",(0,i.jsx)(n.p,{children:"Traditionally, you call functions with their arguments as parameters. However,\nthat is often confusing and can be hard to read:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/Image6.png",src:s(75516).Z+"",width:"934",height:"222"})}),"\n",(0,i.jsxs)(n.p,{children:["Pipelines perform a series of transformations on a value in order. Here, we\nstart with the string ",(0,i.jsx)(n.code,{children:'"live"'})," and pipe it to ",(0,i.jsx)(n.code,{children:"String::reverse"})," to produce\n",(0,i.jsx)(n.code,{children:'"evil"'}),". Then we pipe the result to ",(0,i.jsx)(n.code,{children:"String::toUppercase"}),", producing the string\n",(0,i.jsx)(n.code,{children:'"EVIL"'}),":"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/image9.png",src:s(47868).Z+"",width:"828",height:"268"})}),"\n",(0,i.jsx)(n.h3,{id:"how-to-pipe",children:"How to Pipe"}),"\n",(0,i.jsxs)(n.p,{children:["To start a pipeline, use ",(0,i.jsx)(n.code,{children:"|>"})," at the end of the expression you are piping."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/openpipe.png",src:s(48002).Z+"",width:"992",height:"308"})}),"\n",(0,i.jsxs)(n.p,{children:["Once you are in a pipeline, hitting ",(0,i.jsx)(n.code,{children:"return"})," at the end of the expression will\ncontinue the pipe."]}),"\n",(0,i.jsxs)(n.p,{children:["If you need to pipe a specific subset of an expression, you can select it and\nthen hit ",(0,i.jsx)(n.code,{children:"shift+enter"}),". For example, selecting ",(0,i.jsx)(n.code,{children:"UUID::generate"})," to pipe it into\n",(0,i.jsx)(n.code,{children:"toString"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"functional/openpipe.png",src:s(12884).Z+"",width:"834",height:"722"}),"\n",(0,i.jsx)(n.img,{alt:"functional/openpipe.png",src:s(39803).Z+"",width:"838",height:"366"})]}),"\n",(0,i.jsx)(n.h3,{id:"indentation-tip",children:"Indentation Tip"}),"\n",(0,i.jsx)(n.p,{children:'Look at the indentation to see what is being piped. A common mistake with\npipelines is introducing them at an unintended "level". For example, here the\npiped value is the let expression as a whole, but the author intended to pipe\nthe expression bound to the variable s:'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/image13.png",src:s(48733).Z+"",width:"1034",height:"352"})}),"\n",(0,i.jsxs)(n.p,{children:["_To view the live code provided in the examples above, visit\n",(0,i.jsx)(n.a,{href:"https://darklang.com/a/sample-pipeline",children:"https://darklang.com/a/sample-pipeline"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"listmap",children:"List::Map"}),"\n",(0,i.jsxs)(n.p,{children:["Darklang does not have a for-loop, it has ",(0,i.jsx)(n.code,{children:"List::map."})," This allows you to do\nsomething to a collection of objects in a list."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"List::map"})," takes two parameters. In this case we are passing in a list of\nintegers, and a block."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/image4.png",src:s(49391).Z+"",width:"854",height:"212"})}),"\n",(0,i.jsx)(n.p,{children:"In this case, we multiply each value by two:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/image17.png",src:s(1326).Z+"",width:"864",height:"496"})}),"\n",(0,i.jsx)(n.p,{children:"If we wanted to do something involving subsequent list items, we can use a List\nfold (in this case we pipe the output of our previous list into list::fold),\nresulting in a return value of 10,100:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/image14.png",src:s(27329).Z+"",width:"858",height:"262"})}),"\n",(0,i.jsx)(n.h3,{id:"tips",children:"Tips"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The live values within a block on ",(0,i.jsx)(n.code,{children:"List::map"})," will show you the last item in\nthe list. The live value for ",(0,i.jsx)(n.code,{children:"List::map"})," shows the full outcome."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Known bug:"})," Right now, if you use a map with a function that has a side\neffect (like Int::Rand) the analysis will show you the impact of the ",(0,i.jsx)(n.em,{children:"last"}),"\nversion of the side effect as though it was used for all of them. This is an\nanalysis bug (you are actually getting a random int each time)."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"List map with no side effect:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/listmap1.png",src:s(54469).Z+"",width:"1214",height:"228"})}),"\n",(0,i.jsx)(n.p,{children:"List map with a side effect, appears to use the same Int::random each time:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/listmap2.png",src:s(22614).Z+"",width:"1144",height:"250"})}),"\n",(0,i.jsx)(n.p,{children:"List map with side effect, discrepancy between analysis and values stored in DB:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/listmap3.png",src:s(47267).Z+"",width:"1108",height:"506"})}),"\n",(0,i.jsx)(n.h2,{id:"blocks-lambdas-anonymous-functions",children:"Blocks (lambdas, anonymous functions)"}),"\n",(0,i.jsxs)(n.p,{children:["Blocks are anonymous functions that operate on a set of values. Expressions like\n",(0,i.jsx)(n.code,{children:"List::map"})," and ",(0,i.jsx)(n.code,{children:"DB::query"})," take them as parameters."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/block.png",src:s(23505).Z+"",width:"892",height:"188"})}),"\n",(0,i.jsxs)(n.p,{children:["To open the block type ",(0,i.jsx)(n.code,{children:"\\"}),". It auto-populates the parameters it is expecting\n(like ",(0,i.jsx)(n.code,{children:"value"})," for ",(0,i.jsx)(n.code,{children:"Db::query"})," or ",(0,i.jsx)(n.code,{children:"accum, curr"})," for ",(0,i.jsx)(n.code,{children:"List::fold"}),")."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/block.png",src:s(45169).Z+"",width:"740",height:"444"})}),"\n",(0,i.jsx)(n.h2,{id:"match",children:"Match"}),"\n",(0,i.jsxs)(n.p,{children:["The match expression is used to destructure complex types, such as the ",(0,i.jsx)(n.code,{children:"Option"}),"\ntype (",(0,i.jsx)(n.code,{children:"Just"})," and ",(0,i.jsx)(n.code,{children:"Nothing"}),") and the ",(0,i.jsx)(n.code,{children:"Result"})," type (",(0,i.jsx)(n.code,{children:"Ok"})," and ",(0,i.jsx)(n.code,{children:"Error"}),"). It can\nalso be used similarly to switch statements in other languages."]}),"\n",(0,i.jsxs)(n.p,{children:["By default, functions that return Option or Result go to the\n",(0,i.jsx)(n.a,{href:"https://docs.darklang.com/discussion/unique-aspects#functions-that-use-error-rail",children:"Error Rail"}),".\nOnce you remove the function from the Error Rail, use match for destructuring."]}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s an example of using a match expression with a dictionary lookup."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"functional/image16.png",src:s(44822).Z+"",width:"910",height:"486"})}),"\n",(0,i.jsx)(n.p,{children:"Using a variable name as one of the branches will catch all matches. The\nvariable can be used on the right side of the branch."})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},23505:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/block-27e83d9f6cdd7e5a3aa96b71977a05ab.png"},45169:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/blockfilter-4d56ff432941751e2d074125c45c3ff5.png"},48733:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image13-96990afe170909b604f0a5f8f9c949d9.png"},27329:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image14-5f1f6eba05580c1353b9be406e5352ef.png"},44822:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image16-1ae6b9e27e3825b9558a0605ac339ec2.png"},1326:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image17-7d8e84b643f1e42a4eab5fbfaee9eff7.png"},6962:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image2-08fea7cbe2af7eac6cd05990c51b0955.gif"},49391:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image4-07e836c631b3c0e3bc3f9927669549a8.png"},75516:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image6-60aa524b85fe6bcdb005e3d55403c85f.png"},47868:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/image9-1c527b1b363073ce6b0fbd5536d20af0.png"},54469:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/listmap1-804b546f95c111ff99dec164cbed36ec.png"},22614:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/listmap2-4fc3b70f25be26fe0b5495b94be68709.png"},47267:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/listmap3-11c32326bff088f6d3872b71c6585e57.png"},48002:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/openpipe-fd77fe1f3fed0c98a063c1db14252882.png"},12884:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/selectpipe-5c556f5d79eff4ebc940552288f83973.png"},39803:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/successfulpipe-c625f5c32b701404f81ddbc69fe3e849.png"},11151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var i=s(67294);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);