"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4685],{54054:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=i(85893),t=i(11151);const r={title:"Repository directory structure"},c=void 0,o={id:"contributing/repo-layout",title:"Repository directory structure",description:"The Darklang repo contains multiple services and compilation targets",source:"@site/docs-classic/contributing/repo-layout.md",sourceDirName:"contributing",slug:"/contributing/repo-layout",permalink:"/contributing/repo-layout",draft:!1,unlisted:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs-classic/contributing/repo-layout.md",tags:[],version:"current",frontMatter:{title:"Repository directory structure"},sidebar:"Contributing",previous:{title:"A tour of the Backend",permalink:"/contributing/tour-of-backend"},next:{title:"Glossary",permalink:"/contributing/glossary"}},d={},l=[{value:"Directory listing",id:"directory-listing",level:2}];function a(e){const n={code:"code",em:"em",h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The Darklang repo contains multiple services and compilation targets"}),"\n",(0,s.jsx)(n.h2,{id:"directory-listing",children:"Directory listing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".circleci"})," - CI config file"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".ionide"})," - config for F# VSCode plugin"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".vscode"})," - VSCode config"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"config"})," - a set of env vars for each environment. You'll be interested in the\n",(0,s.jsx)(n.code,{children:"dev"})," environment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docs"})," - sporadic documentation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docs/production"})," - documentation about how we run the Darklang service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"backend"}),' - The backend written in F# and .NET. including the language\ndefinition and execution engine, the "framework" (HTTP, DB, queues, etc), the\neditor\'s HTTP API, and the execution engine which runs in the client.',"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".paket"})," - Used by the Paket/NuGet package manager"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Build"})," - where the compiler puts compiled code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"paket-files"})," - Used by the Paket/NuGet package manager"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/BackendOnlyStdLib"})," - implementation of functions which need to be run\non the backend, due to their connection to the DB, queues, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/BwdServer"})," - webserver that is grand-user facing (at builtwithdark.com)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/ClientTypes"})," - type definitions of types that are used in client-server\ncommunication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/ClientTypes2BackendTypes"})," and ",(0,s.jsx)(n.code,{children:"src/ClientTypes2ExecutionTypes"})," -\nmappings between 'internal' types and our client-facing types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/CronChecker"})," - trigger events for scheduled work"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/ExecHost"})," - allow executing admin tasks (such as migrations) in\nproduction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/HttpMiddleware"})," - where we define our middlewares used in Darklang HTTP\nhandlers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/LibBackend"})," - the framework functionality (HTTP, DB, queues, traces,\nsecrets, serialization), including standard library functions which only run\non the backend (and not in the client)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/LibBinarySerialization"})," - types that we use to store Darklang programs\nto our Postgres database"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/LibExecution"})," - the Darklang language, including types, the runtime,\nand of course the execution engine"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/LibExecutionStdLib"})," - most of the standard library functions (anything\nthat doesn't ",(0,s.jsx)(n.em,{children:"need"})," to be run on the backend)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/LibRealExecution"})," - Small wrapper around LibExecution for running in\nproduction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/LibService"})," - library with some common functionality for F# services\n(currently just the backend, soon queues and cron)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/Prelude"})," - utilities, libraries, common types; used everywhere"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/Parser"})," - parser for Darklang language"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/QueueWorker"})," - pulls user events from the queue and runs them"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tests/TestUtils"})," - utilities used in Tests and FuzzTests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tests/Tests"})," - mostly unit tests for backend and libexecution functionality"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"testfiles/data"})," - text and binary files used during various backend tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"testfiles/execution"})," - unit test definitions for language and standard\nlibrary"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"testfiles/httphandler"})," - tests for the Darklang HTTP server and middleware"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"testfiles/httpclient"})," - tests for the HTTP Library functions"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rundir"})," - anything that runs and stores something stores it here","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"logs"})," - logs from running services, especially ",(0,s.jsx)(n.code,{children:"bwdserver.log"})," (backend)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scripts"})," - bash scripts to do common (and sometimes uncommon and therefore\nforgettable) actions on the repo. Using scripts is very very common. Anytime\nthere's something interesting, we add a script to do it. Scripts are\noccasionally out of date."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>c});var s=i(67294);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);