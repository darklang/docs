"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9061],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},64844:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>u,contentTitle:()=>l,metadata:()=>s,toc:()=>c,default:()=>d});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),a=["components"],u={title:"Making your first Pull Request"},l=void 0,s={unversionedId:"contributing/making-your-first-pull-request",id:"contributing/making-your-first-pull-request",title:"Making your first Pull Request",description:"Right now you've got uncommitted code, let's get that into a Pull Request on",source:"@site/docs/contributing/making-your-first-pull-request.md",sourceDirName:"contributing",slug:"/contributing/making-your-first-pull-request",permalink:"/contributing/making-your-first-pull-request",editUrl:"https://github.com/darklang/docs/edit/main/docs/contributing/making-your-first-pull-request.md",tags:[],version:"current",frontMatter:{title:"Making your first Pull Request"},sidebar:"Contributing",previous:{title:"Adding your first test",permalink:"/contributing/adding-your-first-test"},next:{title:"Your next contribution",permalink:"/contributing/next-contribution"}},c=[{value:"Formatting the code",id:"formatting-the-code",children:[],level:2},{value:"Set up your fork",id:"set-up-your-fork",children:[],level:2},{value:"Push",id:"push",children:[],level:2},{value:"Make the Pull Request",id:"make-the-pull-request",children:[],level:2}],p={toc:c};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Right now you've got uncommitted code, let's get that into a Pull Request on\nGitHub."),(0,i.kt)("h2",{id:"formatting-the-code"},"Formatting the code"),(0,i.kt)("p",null,"We use a code formatter on all our files, and this is tested during CI on all\nPRs. To format, call ",(0,i.kt)("inlineCode",{parentName:"p"},"scripts/format format backend"),". There is also a\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/darklang/dark/blob/main/scripts/pre-commit-hook.sh"},"git hook you can use"),"."),(0,i.kt)("h2",{id:"set-up-your-fork"},"Set up your fork"),(0,i.kt)("p",null,"Dark uses a fork model for contributions, like many GitHub projects. Go to the\n",(0,i.kt)("a",{parentName:"p",href:"https://darklang.com/darklang/dark"},"Dark repo")," in your browser and click ",(0,i.kt)("inlineCode",{parentName:"p"},"fork"),"\nto add a fork."),(0,i.kt)("p",null,"Then change your local repo to use the fork:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git remote rm origin\ngit remote add origin https://github.com/myGitHubUsername/dark.git\n")),(0,i.kt)("h2",{id:"push"},"Push"),(0,i.kt)("p",null,"Finally commit and push"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git add backend\ngit commit -m "Add test for List::member"\ngit push --set-upstream origin first-contribution\n')),(0,i.kt)("h2",{id:"make-the-pull-request"},"Make the Pull Request"),(0,i.kt)("p",null,"Go back to GitHub and make a pull request. Here's a good message for your pull\nrequest:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},'"Hi - this is my first pull request. I noticed that List::member didn\'t have\nany tests so I added one."')),(0,i.kt)("p",null,"While this doesn't follow our\n",(0,i.kt)("a",{parentName:"p",href:"/contributing/making-a-pull-request#writing-a-successful-pull-request-message"},"Pull Request guidelines"),",\nit's fine for a first contribution (and you can ignore the PR template too for\nnow)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"And that's your first PR - congratulations!")),(0,i.kt)("p",null,"(Note that if you haven't signed the CLA, a bot will prompt you to do so now.)"))}d.isMDXComponent=!0}}]);