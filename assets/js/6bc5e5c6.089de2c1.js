"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5606],{28340:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=r(85893),n=r(11151);const o={title:"Tutorial: Process background jobs in a Worker",sidebar_label:"Process background jobs in a Worker",id:"process-background-jobs-worker"},a=void 0,i={id:"tutorials/process-background-jobs-worker",title:"Tutorial: Process background jobs in a Worker",description:"Workers process jobs in the background, ideal for daily reports. They're also",source:"@site/docs-classic/tutorials/06-process-background-jobs-worker.md",sourceDirName:"tutorials",slug:"/tutorials/process-background-jobs-worker",permalink:"/tutorials/process-background-jobs-worker",draft:!1,unlisted:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs-classic/tutorials/06-process-background-jobs-worker.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Tutorial: Process background jobs in a Worker",sidebar_label:"Process background jobs in a Worker",id:"process-background-jobs-worker"},sidebar:"docs",previous:{title:"Create a daily job with a Cron handler",permalink:"/tutorials/create-daily-job-cron-handler"},next:{title:"Extract code into a Function",permalink:"/tutorials/extract-function"}},d={},c=[];function l(e){const t={code:"code",img:"img",li:"li",ol:"ol",p:"p",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Workers process jobs in the background, ideal for daily reports. They're also\ncommonly used for sending notifications and other asynchronous tasks that we\ndon't want to handle in HTTP requests."}),"\n",(0,s.jsxs)(t.p,{children:["We're going to create a report, and store the aggregate data in the\n",(0,s.jsx)(t.code,{children:"DailyReport"})," datastore."]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["From the 404 section of the sidebar, hit the plus (+) button to create the\n",(0,s.jsx)(t.code,{children:"StoreReport"})," Worker. The Worker will already be named, and hovering over the\nwhite dot will show you the event triggered by your cron."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"gettingstarted/newworker.png",src:r(41614).Z+"",width:"1416",height:"448"})}),"\n",(0,s.jsxs)(t.ol,{start:"2",children:["\n",(0,s.jsxs)(t.li,{children:["For the report, we're going to store our data by human readable dates (like\n",(0,s.jsx)(t.code,{children:"02-27-2020"}),"). First, we'll get the current date, and then get the pieces and\nre-aggregate them."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"gettingstarted/humandate.png",src:r(7145).Z+"",width:"940",height:"576"})}),"\n",(0,s.jsxs)(t.ol,{start:"3",children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"event"})," we received is not the exact shape we want. Let's process it\nusing ",(0,s.jsx)(t.code,{children:"List::map"})," to keep just the ",(0,s.jsx)(t.code,{children:"data"})," field."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"gettingstarted/dataonly.png",src:r(13924).Z+"",width:"924",height:"624"})}),"\n",(0,s.jsxs)(t.ol,{start:"4",children:["\n",(0,s.jsx)(t.li,{children:"Make a second datastore with three fields: the nicely-formatted date, the\nlist of requests, and the count of requests for that day."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"gettingstarted/seconddatastore.png",src:r(89246).Z+"",width:"804",height:"366"})}),"\n",(0,s.jsxs)(t.ol,{start:"5",children:["\n",(0,s.jsxs)(t.li,{children:["To get the count, use ",(0,s.jsx)(t.code,{children:"List::length"}),". Then we store it in the DB, using\n",(0,s.jsx)(t.code,{children:"humanDate"})," as the key."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"gettingstarted/dbsetworker.png",src:r(64721).Z+"",width:"974",height:"884"})}),"\n",(0,s.jsxs)(t.ol,{start:"6",children:["\n",(0,s.jsx)(t.li,{children:"Now, our first datastore stores each incoming request, and every 24 hours our\nCron runs, sending the right reports to our worker, which stores a report in\nour second datastore."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},13924:(e,t,r)=>{r.d(t,{Z:()=>s});const s=r.p+"assets/images/dataonly-cf9468b7dcb644b5f8463065bd444c25.png"},64721:(e,t,r)=>{r.d(t,{Z:()=>s});const s=r.p+"assets/images/dbsetworker-87ae94b8eafb89024b21104a5edc4d8c.png"},7145:(e,t,r)=>{r.d(t,{Z:()=>s});const s=r.p+"assets/images/humandate-b90eac35de5f33095fef224079320736.png"},41614:(e,t,r)=>{r.d(t,{Z:()=>s});const s=r.p+"assets/images/newworker-6e81cfaf0a8a8bb1690de821fdc770ef.png"},89246:(e,t,r)=>{r.d(t,{Z:()=>s});const s=r.p+"assets/images/seconddatastore-da5b46c5a73aa078c1fc4a03089bd48f.png"},11151:(e,t,r)=>{r.d(t,{Z:()=>i,a:()=>a});var s=r(67294);const n={},o=s.createContext(n);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);