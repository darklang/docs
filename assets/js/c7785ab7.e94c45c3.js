"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1068],{95508:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=t(85893),o=t(11151);const a={title:"Operators",sidebar_label:"Operators",sidebar_position:2,keywords:["types","conversion"],draft:!1},s=void 0,i={id:"reference/language-reference/operators",title:"Operators",description:"? and ! operators (similar to Rust, TypeScript, and Clojure) provide ways to ergonomically handle errors without being too annoying (see also Gradual Static Typing)",source:"@site/docs/reference/language-reference/operators.md",sourceDirName:"reference/language-reference",slug:"/reference/language-reference/operators",permalink:"/next/reference/language-reference/operators",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Operators",sidebar_label:"Operators",sidebar_position:2,keywords:["types","conversion"],draft:!1},sidebar:"myAutogeneratedSidebar",previous:{title:"Record",permalink:"/next/reference/language-reference/built-in-types/record"},next:{title:"Option & Result",permalink:"/next/reference/language-reference/option-result"}},c={},l=[];function p(e){const r={p:"p",...(0,o.a)(),...e.components};return(0,n.jsx)(r.p,{children:"? and ! operators (similar to Rust, TypeScript, and Clojure) provide ways to ergonomically handle errors without being too annoying (see also Gradual Static Typing)"})}function u(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},11151:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>s});var n=t(67294);const o={},a=n.createContext(o);function s(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);