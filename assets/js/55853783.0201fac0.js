"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9325],{48080:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"reference/language-reference/built-in-types/int","title":"Int","description":"Integers default to 64 bit signed numbers.","source":"@site/docs/reference/language-reference/built-in-types/int.md","sourceDirName":"reference/language-reference/built-in-types","slug":"/reference/language-reference/built-in-types/int","permalink":"/next/reference/language-reference/built-in-types/int","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Int","sidebar_label":"Int","sidebar_position":2,"keywords":["types","integer","unsigned","number","long"],"draft":false},"sidebar":"myAutogeneratedSidebar","previous":{"title":"Bool","permalink":"/next/reference/language-reference/built-in-types/bool"},"next":{"title":"Enum","permalink":"/next/reference/language-reference/built-in-types/enum"}}');var l=t(74848),d=t(28453);const r={title:"Int",sidebar_label:"Int",sidebar_position:2,keywords:["types","integer","unsigned","number","long"],draft:!1},s=void 0,c={},a=[{value:"Functions",id:"functions",level:2},{value:"Absolute Value",id:"absolute-value",level:3},{value:"Definition",id:"definition",level:4},{value:"Example",id:"example",level:4},{value:"Add",id:"add",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Clamp",id:"clamp",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Examples",id:"examples",level:4}];function h(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:"Integers default to 64 bit signed numbers."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-darklang",children:"let x = 42\n"})}),"\n",(0,l.jsx)(n.p,{children:"Other integer sizes supported are described below. To declare a variable with a\nspecific integer size, append the size suffix to the value."}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"F# Equivalent"}),(0,l.jsx)(n.th,{children:"Description"}),(0,l.jsx)(n.th,{children:"Suffix"}),(0,l.jsx)(n.th,{children:"Examples"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"int8"}),(0,l.jsx)(n.td,{children:"signed 8 bit number"}),(0,l.jsx)(n.td,{children:"y"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let fizz = 42y"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"uint8"}),(0,l.jsx)(n.td,{children:"unsigned 8 bit number"}),(0,l.jsx)(n.td,{children:"uy"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let buzz = 42uy"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"int16"}),(0,l.jsx)(n.td,{children:"signed 16 bit number"}),(0,l.jsx)(n.td,{children:"s"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let fizz = 42s"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"uint16"}),(0,l.jsx)(n.td,{children:"unsigned 16 bit number"}),(0,l.jsx)(n.td,{children:"us"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let buzz = 42us"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"int32"}),(0,l.jsx)(n.td,{children:"signed 32 bit number"}),(0,l.jsx)(n.td,{children:"l"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let fizz = 42l"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"uint32"}),(0,l.jsx)(n.td,{children:"unsigned 32 bit number"}),(0,l.jsx)(n.td,{children:"ul"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let buzz = 42ul"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"int64"}),(0,l.jsx)(n.td,{children:"signed 64 bit number (default)"}),(0,l.jsx)(n.td,{children:"L"}),(0,l.jsxs)(n.td,{children:[(0,l.jsx)(n.code,{children:"let fizz = 42"})," (no suffix)"]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"uint64"}),(0,l.jsx)(n.td,{children:"unsigned 64 bit number"}),(0,l.jsx)(n.td,{children:"uL"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let buzz = 42uL"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"int128"}),(0,l.jsx)(n.td,{children:"signed 128 bit number"}),(0,l.jsx)(n.td,{children:"Q"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let fizz = 42Q"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"uint128"}),(0,l.jsx)(n.td,{children:"unsigned 128 bit number"}),(0,l.jsx)(n.td,{children:"Z"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let buzz = 42Z"})})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,l.jsx)(n.h3,{id:"absolute-value",children:"Absolute Value"}),"\n",(0,l.jsx)(n.p,{children:"The mathmatical absolute value of the integer."}),"\n",(0,l.jsx)(n.h4,{id:"definition",children:"Definition"}),"\n",(0,l.jsx)(n.p,{children:"Int.absoluteValue(Int: a) -> Int"}),"\n",(0,l.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-darklang",children:"let x = -1\nlet y = 1\nlet X = Int.absoluteValue x\nlet Y = Int.absoluteValue y\n[X,Y]\n"})}),"\n",(0,l.jsx)(n.p,{children:"This trace returns: [1,1]"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"add",children:"Add"}),"\n",(0,l.jsx)(n.p,{children:"The sum of two integers."}),"\n",(0,l.jsx)(n.h4,{id:"definition-1",children:"Definition"}),"\n",(0,l.jsx)(n.p,{children:"Int.add(Int: a, Int: b) -> Int"}),"\n",(0,l.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-darklang",children:"let x = -1\nlet y = 1\nlet z = Int.add x y\nz\n"})}),"\n",(0,l.jsx)(n.p,{children:"This trace returns: 0"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"clamp",children:"Clamp"}),"\n",(0,l.jsx)(n.p,{children:"Constrains a value to a range. If the value is within the range defined by the parameters the input value is returned. If the value is outside the range, the range boundary closest to the input value is returned."}),"\n",(0,l.jsx)(n.h4,{id:"definition-2",children:"Definition"}),"\n",(0,l.jsx)(n.p,{children:"Int.clamp(Int: value, Int: limitA, Int: limitB) -> Int"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Parameter"}),(0,l.jsx)(n.th,{children:"Definition"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.em,{children:"value"})}),(0,l.jsx)(n.td,{children:"The input value to check against the range bounds."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.em,{children:"limitA"})}),(0,l.jsx)(n.td,{children:"One end of the range."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.em,{children:"limitB"})}),(0,l.jsx)(n.td,{children:"The other end of the range."})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-darklang",children:"let value = 5\nlet lowerBound = 1\nlet upperBound = 9\nInt.clamp value lowerBound upperBound\n"})}),"\n",(0,l.jsx)(n.p,{children:"This trace returns: 5"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-darklang",children:"let value = 10\nlet lowerBound = 1\nlet upperBound = 9\nInt.clamp value upperBound lowerBound\n"})}),"\n",(0,l.jsx)(n.p,{children:"This trace returns: 9"})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(96540);const l={},d=i.createContext(l);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);