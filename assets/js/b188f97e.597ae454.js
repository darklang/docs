"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[627],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>f});var r=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=r.createContext({}),u=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},p=function(t){var e=u(t.components);return r.createElement(l.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,l=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=u(n),f=i,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||o;return n?r.createElement(m,a(a({ref:e},p),{},{components:n})):r.createElement(m,a({ref:e},p))}));function f(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47155:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={title:"Adding your first test"},l=void 0,u={unversionedId:"contributing/adding-your-first-test",id:"contributing/adding-your-first-test",title:"Adding your first test",description:"Let's talk you through the first contribution. You'll write a small unit test",source:"@site/docs/contributing/adding-your-first-test.md",sourceDirName:"contributing",slug:"/contributing/adding-your-first-test",permalink:"/contributing/adding-your-first-test",draft:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs/contributing/adding-your-first-test.md",tags:[],version:"current",frontMatter:{title:"Adding your first test"},sidebar:"Contributing",previous:{title:"Setting up the Darklang repo",permalink:"/contributing/setting-up-the-repo"},next:{title:"Making your first Pull Request",permalink:"/contributing/making-your-first-pull-request"}},p={},c=[{value:"Adding the test",id:"adding-the-test",level:2}],d={toc:c};function f(t){var e=t.components,n=(0,i.Z)(t,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Let's talk you through the first contribution. You'll write a small unit test\nfor a built-in function. This will get you through the process of contributing\nand get you familiar with how to get code into Darklang."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"We're assuming you've got the repo is set up and the ",(0,o.kt)("inlineCode",{parentName:"em"},"builder")," script is\nrunning (or if you're running the devcontainer in VSCode, that the devcontainer\nis running)!")),(0,o.kt)("h2",{id:"adding-the-test"},"Adding the test"),(0,o.kt)("p",null,"We keep a list of functions which need tests an the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/darklang/dark/issues/3262"},"Test Every Function issue")," - pick\nyour favorite."),(0,o.kt)("p",null,"As an example, let's add one for ",(0,o.kt)("inlineCode",{parentName:"p"},"Float::add_v0"),"."),(0,o.kt)("p",null,"Unit tests for Darklang functions are in ",(0,o.kt)("inlineCode",{parentName:"p"},'backend/testfiles/execution/*.tests"'),",\ntypically named after the module we're in (e.g., in this case, we want\n",(0,o.kt)("inlineCode",{parentName:"p"},"float.tests"),"). See\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/darklang/dark/tree/main/backend/testfiles/README.md"},"testfiles/README.md"),"\nto see detailed notes on the options of how to write tests. An example test is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-fsharp"},"Float.multiply_v0 26.0 0.5 = 13.0\n")),(0,o.kt)("p",null,"This tests the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Float::multiply_v0")," by giving it parameters and an\nexpected result. We can write much more complicated functions too"),(0,o.kt)("p",null,"Let's make one for ",(0,o.kt)("inlineCode",{parentName:"p"},"Float::add_v0"),":"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Float.add_v0 26.0 0.5 = 26.5")),(0,o.kt)("p",null,"Add this to ",(0,o.kt)("inlineCode",{parentName:"p"},"float.tests"),", save the file, and it should automatically recompile\nand run the test."),(0,o.kt)("p",null,"(If you're running the container in VSCode, run\n",(0,o.kt)("inlineCode",{parentName:"p"},"./scripts/run-fsharp-tests --filter-test-list float")," instead)"),(0,o.kt)("p",null,"Great, we're done!"))}f.isMDXComponent=!0}}]);