"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[131],{20514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=t(85893),i=t(11151);const s={id:"error-handling",title:"Error Handling",sidebar_label:"Error Handling"},o=void 0,a={id:"discussion/error-handling",title:"Error Handling",description:"The Darklang code you write in your handlers is available as soon as you type",source:"@site/docs-classic/discussion/error-handling.md",sourceDirName:"discussion",slug:"/discussion/error-handling",permalink:"/discussion/error-handling",draft:!1,unlisted:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs-classic/discussion/error-handling.md",tags:[],version:"current",frontMatter:{id:"error-handling",title:"Error Handling",sidebar_label:"Error Handling"},sidebar:"docs",previous:{title:"Structured Editing",permalink:"/discussion/structured-editing"},next:{title:"Changelog",permalink:"/changelog"}},l={},d=[{value:"Incomplete Code",id:"incomplete-code",level:2},{value:"The finer details",id:"the-finer-details",level:3},{value:"Type errors",id:"type-errors",level:2},{value:"Error Rail",id:"error-rail",level:2},{value:"Background: Result and Option types",id:"background-result-and-option-types",level:3},{value:"Background: matches",id:"background-matches",level:3},{value:"Prototyping using the Error Rail",id:"prototyping-using-the-error-rail",level:3},{value:"Handling errors exhaustively",id:"handling-errors-exhaustively",level:3},{value:"Error rails with Incomplete and Type Errors",id:"error-rails-with-incomplete-and-type-errors",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The Darklang code you write in your handlers is available as soon as you type\n(deployless). We have a number of built-in features to support this style of\nwriting, as well as dealing with errors."}),"\n",(0,r.jsx)(n.h2,{id:"incomplete-code",children:"Incomplete Code"}),"\n",(0,r.jsxs)(n.p,{children:['Darklang executes code as you write it, and sometimes the code you execute won\'t\nbe fully written yet. We call code like this "incomplete". Anytime incomplete\ncode is executed, it results in a value of ',(0,r.jsx)(n.code,{children:"<Incomplete>"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," Here, the block has not been completed because the final expression\nis not filled in. Therefore the handler returns ",(0,r.jsx)(n.code,{children:"<Incomplete>"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"error/image11.png",src:t(93362).Z+"",width:"1226",height:"350"})}),"\n",(0,r.jsxs)(n.p,{children:["Incomplete values are allowed to co-exist with other values--whenever they\ninteract, the result is another ",(0,r.jsx)(n.code,{children:"<Incomplete>"}),". If they do not interact, often\nthe valid value will continue, perhaps being returned to your user in a HTTP\nhandler, or saved in a datastore."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," Here we left the query parameter blank in a call to\n",(0,r.jsx)(n.code,{children:"HttpClient::get"}),". The result of the function is therefore ",(0,r.jsx)(n.code,{children:"<Incomplete>"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"error/image13.png",src:t(3560).Z+"",width:"2034",height:"398"})}),"\n",(0,r.jsxs)(n.p,{children:["When something is incomplete, it will be shown with a red underline. An\nexpression may be incomplete even if it seems fine: this is because something it\ndepends on is incomplete. For example, in the case below we are returning ",(0,r.jsx)(n.code,{children:"var"}),"\nbut never defined it:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"error/image10.png",src:t(8446).Z+"",width:"1326",height:"300"})}),"\n",(0,r.jsx)(n.p,{children:'In these cases, we provide a link to the source of the incomplete. Click on\n"click to locate source" and it will take you the source of the error.'}),"\n",(0,r.jsx)(n.h3,{id:"the-finer-details",children:"The finer details"}),"\n",(0,r.jsxs)(n.p,{children:["Incompletes are intended to allow you write code without disrupting the code\naround it. You can add an empty ",(0,r.jsx)(n.code,{children:"let"})," statement -- which will have an\n",(0,r.jsx)(n.code,{children:"<Incomplete>"})," value on the right -- and because that new value doesn't interact\nwith anything else, you code will continue to run just fine."]}),"\n",(0,r.jsxs)(n.p,{children:["Similarly, ",(0,r.jsx)(n.code,{children:"<Incomplete>"}),"s are ignored in lists. If you have an empty list, and\nstart to add an entry to that list, the new code will result in ",(0,r.jsx)(n.code,{children:"<Incomplete>"}),"\nuntil you have completed the code. The list will evaluate to ",(0,r.jsx)(n.code,{children:"[]"}),". This is so\nthat you can add entries to lists to without temporarily breaking your code."]}),"\n",(0,r.jsx)(n.p,{children:"The same is true of fields in a record: they will be ignored until the field's\nvalue is complete."}),"\n",(0,r.jsxs)(n.p,{children:["If a HTTP handler results in an ",(0,r.jsx)(n.code,{children:"<Incomplete>"}),", your user will get a 500 status\ncode with an error message."]}),"\n",(0,r.jsx)(n.h2,{id:"type-errors",children:"Type errors"}),"\n",(0,r.jsx)(n.p,{children:'When you see "invalid code", it means that your program is complete but has\nissues (which are almost always type error). The error message should have\nenough . Carefully read the message to see what\'s wrong.'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsxs)(n.p,{children:["Here we tried to use ",(0,r.jsx)(n.code,{children:"DB::set"})," with an Int for the ",(0,r.jsx)(n.code,{children:"key"})," parameter, even though\n",(0,r.jsx)(n.code,{children:"key"})," needs to be a string."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"error/image14.png",src:t(12779).Z+"",width:"2366",height:"532"})}),"\n",(0,r.jsxs)(n.p,{children:["To resolve this problem, we can use a string instead. ",(0,r.jsx)(n.code,{children:'"123"'})," or\n",(0,r.jsx)(n.code,{children:"123 |> toString"})," will both work."]}),"\n",(0,r.jsx)(n.h2,{id:"error-rail",children:"Error Rail"}),"\n",(0,r.jsx)(n.p,{children:"The error rail is a unique feature of Darklang. It's purpose is to allow you\neasily prototype code without having to deal with every error."}),"\n",(0,r.jsx)(n.h3,{id:"background-result-and-option-types",children:"Background: Result and Option types"}),"\n",(0,r.jsxs)(n.p,{children:["Darklang has two types that model errors. The ",(0,r.jsx)(n.code,{children:"Option"})," type allows you to model\na value or the lack of a value. For example, when fetching a value from a\ndictionary or Datastore, if the value doesn't exist, the function will return\n",(0,r.jsx)(n.code,{children:"Nothing"}),". If it does exist, the function will return the value wrapped in a\n",(0,r.jsx)(n.code,{children:"Just"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In this case it unwraps to ",(0,r.jsx)(n.code,{children:"Just val"})," and the behavior would be the same for\nfunctions that would return ",(0,r.jsx)(n.code,{children:"Ok val"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"unique/offrail_value.png",src:t(22365).Z+"",width:"954",height:"258"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"unique/offrail_value.png",src:t(39177).Z+"",width:"928",height:"166"})}),"\n",(0,r.jsxs)(n.p,{children:["Similarly, to handle errors, you can use a ",(0,r.jsx)(n.code,{children:"Result"}),": ",(0,r.jsx)(n.code,{children:"Ok val"})," wraps a successful\noperation, and ",(0,r.jsx)(n.code,{children:"Error err"})," wraps a failure value (possibly a string, or some\nother value with information about the error)."]}),"\n",(0,r.jsx)(n.h3,{id:"background-matches",children:"Background: matches"}),"\n",(0,r.jsxs)(n.p,{children:["Getting the value from an ",(0,r.jsx)(n.code,{children:"Option"})," or ",(0,r.jsx)(n.code,{children:"Result"})," can be irritating. You need to\nuse ",(0,r.jsx)(n.code,{children:"match"})," to check both possible values. This gives you certainty that you've\nhandled the different options, but means you need to do this cumbersome step for\nany function which doesn't always succeed (which is a lot of them)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"unique/match.png",src:t(93585).Z+"",width:"808",height:"270"})}),"\n",(0,r.jsx)(n.h3,{id:"prototyping-using-the-error-rail",children:"Prototyping using the Error Rail"}),"\n",(0,r.jsxs)(n.p,{children:["When you are prototyping, you don't want to write tedious error checking code\nthat you might subsequently delete anyway. To make prototyping easier, functions\nthat result ",(0,r.jsx)(n.code,{children:"Option"})," and ",(0,r.jsx)(n.code,{children:"Result"})," types can be automatically unwrapped. It's as\nif these functions threw exceptions in the error case instead of using our more\nstructured error handling mechanism."]}),"\n",(0,r.jsxs)(n.p,{children:["Functions that return ",(0,r.jsx)(n.code,{children:"Option"})," and ",(0,r.jsx)(n.code,{children:"Result"}),' are automatically "put on the\nerrorrail" This means that they are automatically unwrapped in the success case.\nIn the failure case, execution stops in the handler or function and the bad\nvalue is immediately returned.']}),"\n",(0,r.jsx)(n.p,{children:"A grey circle (\ud83d\udd18) on the right indicates that a success value was unwrapped."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"unique/railnotyetrun.png",src:t(29095).Z+"",width:"806",height:"172"})}),"\n",(0,r.jsx)(n.p,{children:"A red error sign (\ud83d\udeab) on the right indicates that the function failed and that\nexecution was stopped."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"unique/railnotyetrun.png",src:t(4857).Z+"",width:"826",height:"162"})}),"\n",(0,r.jsx)(n.p,{children:"If the function has not yet been run, there will be a dotted line (\u2999) on the\nright to indicate that an error could happen."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"unique/railnotyetrun.png",src:t(97495).Z+"",width:"828",height:"176"})}),"\n",(0,r.jsx)(n.h3,{id:"handling-errors-exhaustively",children:"Handling errors exhaustively"}),"\n",(0,r.jsx)(n.p,{children:"While this is useful in prototyping, once you've figured out what your code is\nsupposed to do, you'll want to handle potential errors. The ErrorRail indicators\nwill show you places where an error might happen, allowing you to add error\nhandling code."}),"\n",(0,r.jsxs)(n.p,{children:["When you are ready to handle error cases, you remove them from the rail by using\nthe editor command ",(0,r.jsx)(n.code,{children:"take-function-off-rail"})," (open the Command palette by hitting\n",(0,r.jsx)(n.code,{children:"Ctrl-\\"})," ",(0,r.jsx)(n.strong,{children:"on the function name"}),"). The result will no longer be unwrapped, and\nyou can handle the ",(0,r.jsx)(n.code,{children:"Option"})," or ",(0,r.jsx)(n.code,{children:"Result"})," value directly. You will typically do\nthis using a ",(0,r.jsx)(n.code,{children:"match"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"unique/match.png",src:t(88644).Z+"",width:"1356",height:"352"})}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://darklang.com/a/sample-match",children:"our sample canvas"})," for examples."]}),"\n",(0,r.jsx)(n.h2,{id:"error-rails-with-incomplete-and-type-errors",children:"Error rails with Incomplete and Type Errors"}),"\n",(0,r.jsxs)(n.p,{children:["Incompletes and type errors are not the same as ",(0,r.jsx)(n.code,{children:"Option"})," and ",(0,r.jsx)(n.code,{children:"Result"})," types, and\ncannot be used together. You cannot handle ",(0,r.jsx)(n.code,{children:"<Incomplete>"}),"s or type error using\nthe error rail."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8446:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/image10-552468def66c5166b9fca7dff6ad0c92.png"},93362:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/image11-ee07ad1b849e64b4120c3948e596aa90.png"},3560:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/image13-6c8f72633e566f6cea4e08f7cfd1f705.png"},12779:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/image14-fce436e102cbd6bd8e04f7afe09eedff.png"},4857:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/errorrail_failure-b4040aef678d99fda09c91e008b2be17.png"},29095:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/errorrail_success-e000a956c35ed7501228f689e7158f87.png"},93585:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/match-74867aab1d612baf31c5e1daac21a4f8.png"},88644:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/match_just-5e3ef6c0935c178a90bd47eb898c8a77.png"},39177:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/offrail_error-bc3b03753a94b5d8883252eda2742a45.png"},22365:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/offrail_value-b69903e3884744f84fa53e39c3c837a3.png"},97495:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/railnotyetrun-f9809db48bdf629b37769f884c167517.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var r=t(67294);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);