"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[835],{34015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>a});var i=t(85893),d=t(11151);const r={title:"Int",sidebar_label:"Int",sidebar_position:2,keywords:["types","integer","unsigned","number","long"],draft:!1},l=void 0,s={id:"reference/language-reference/built-in-types/int",title:"Int",description:"Integers default to 64 bit signed numbers.",source:"@site/docs/reference/language-reference/built-in-types/int.md",sourceDirName:"reference/language-reference/built-in-types",slug:"/reference/language-reference/built-in-types/int",permalink:"/next/reference/language-reference/built-in-types/int",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Int",sidebar_label:"Int",sidebar_position:2,keywords:["types","integer","unsigned","number","long"],draft:!1},sidebar:"myAutogeneratedSidebar",previous:{title:"Bool",permalink:"/next/reference/language-reference/built-in-types/bool"},next:{title:"Enum",permalink:"/next/reference/language-reference/built-in-types/enum"}},c={},a=[{value:"Functions",id:"functions",level:2},{value:"Absolute Value",id:"absolute-value",level:3},{value:"Definition",id:"definition",level:4},{value:"Example",id:"example",level:4},{value:"Add",id:"add",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Example",id:"example-1",level:4}];function h(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Integers default to 64 bit signed numbers."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-darklang",children:"let x = 42\n"})}),"\n",(0,i.jsx)(n.p,{children:"Other integer sizes supported are described below. To declare a variable with a\nspecific integer size, append the size suffix to the value."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"F# Equivalent"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Suffix"}),(0,i.jsx)(n.th,{children:"Examples"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int8"}),(0,i.jsx)(n.td,{children:"signed 8 bit number"}),(0,i.jsx)(n.td,{children:"y"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let fizz = 42y"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"uint8"}),(0,i.jsx)(n.td,{children:"unsigned 8 bit number"}),(0,i.jsx)(n.td,{children:"uy"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let buzz = 42uy"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int16"}),(0,i.jsx)(n.td,{children:"signed 16 bit number"}),(0,i.jsx)(n.td,{children:"s"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let fizz = 42s"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"uint16"}),(0,i.jsx)(n.td,{children:"unsigned 16 bit number"}),(0,i.jsx)(n.td,{children:"us"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let buzz = 42us"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int32"}),(0,i.jsx)(n.td,{children:"signed 32 bit number"}),(0,i.jsx)(n.td,{children:"l"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let fizz = 42l"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"uint32"}),(0,i.jsx)(n.td,{children:"unsigned 32 bit number"}),(0,i.jsx)(n.td,{children:"ul"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let buzz = 42ul"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int64"}),(0,i.jsx)(n.td,{children:"signed 64 bit number (default)"}),(0,i.jsx)(n.td,{children:"L"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"let fizz = 42"})," (no suffix)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"uint64"}),(0,i.jsx)(n.td,{children:"unsigned 64 bit number"}),(0,i.jsx)(n.td,{children:"uL"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let buzz = 42uL"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int128"}),(0,i.jsx)(n.td,{children:"signed 128 bit number"}),(0,i.jsx)(n.td,{children:"Q"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let fizz = 42Q"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"uint128"}),(0,i.jsx)(n.td,{children:"unsigned 128 bit number"}),(0,i.jsx)(n.td,{children:"Z"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"let buzz = 42Z"})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.h3,{id:"absolute-value",children:"Absolute Value"}),"\n",(0,i.jsx)(n.p,{children:"The mathmatical absolute value of the integer."}),"\n",(0,i.jsx)(n.h4,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(n.p,{children:"Int.absoluteValue(Int: a) -> Int"}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-darklang",children:"let x = -1\nlet y = 1\nlet X = Int.absoluteValue x\nlet Y = Int.absoluteValue y\n[X,Y]\n"})}),"\n",(0,i.jsx)(n.p,{children:"This trace returns: [1,1]"}),"\n",(0,i.jsx)(n.h3,{id:"add",children:"Add"}),"\n",(0,i.jsx)(n.p,{children:"The sum of two integers."}),"\n",(0,i.jsx)(n.h4,{id:"definition-1",children:"Definition"}),"\n",(0,i.jsx)(n.p,{children:"Int.add(Int: a, Int: b) -> Int"}),"\n",(0,i.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-darklang",children:"let x = -1\nlet y = 1\nlet z = Int.add x y\nz\n"})}),"\n",(0,i.jsx)(n.p,{children:"This trace returns: 0"})]})}function u(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>l});var i=t(67294);const d={},r=i.createContext(d);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);