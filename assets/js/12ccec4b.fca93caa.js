"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8211],{3905:(e,t,n)=>{n.d(t,{kt:()=>u});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?i.createElement(k,l(l({ref:t},c),{},{components:n})):i.createElement(k,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},16248:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),l=["components"],o={title:"Repository directory structure"},s=void 0,p={unversionedId:"contributing/repo-layout",id:"contributing/repo-layout",title:"Repository directory structure",description:"The Dark repo contains multiple services and compilation targets. For OCaml,",source:"@site/docs/contributing/repo-layout.md",sourceDirName:"contributing",slug:"/contributing/repo-layout",permalink:"/contributing/repo-layout",draft:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs/contributing/repo-layout.md",tags:[],version:"current",frontMatter:{title:"Repository directory structure"},sidebar:"Contributing",previous:{title:"A tour of the Backend",permalink:"/contributing/tour-of-backend"},next:{title:"Glossary",permalink:"/contributing/glossary"}},d={},c=[{value:"Directory listing",id:"directory-listing",level:2}],u={toc:c};function m(e){var t=e.components,o=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Dark repo contains multiple services and compilation targets. For OCaml,\nhere's how the various directories intersect, and what language they use:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Compilation targets and their respective directories",src:n(96804).Z,width:"812",height:"800"})),(0,a.kt)("h2",{id:"directory-listing"},"Directory listing"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".circleci")," - CI config file"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".ionide")," - config for F# VsCode plugin"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".vscode")," - VsCode config"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"auth0-branding")," - has some assets for our login provider"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_build")," - build dir for OCaml (empty, this is a docker volume)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_esy")," build dir for OCaml (empty, this is a docker volume)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"client")," - the editor, and the entire frontend application that is found under\n",(0,a.kt)("a",{parentName:"li",href:"http://darklang.com/a/yourcanvas"},"darklang.com/a/yourcanvas")," (note, not\ndarklang.com or the docs). Written in ReScript. All frontend functionality,\nexcept the server-side APIs used for it, are here",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/analysis")," - handles code related to live values - requesting from the\nserver, storing, sending to the client-side execution engine"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/api")," - most requests to the HTTP API live here"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/app")," - important scaffolding for the application (settings, exception\ntracking, ",(0,a.kt)("inlineCode",{parentName:"li"},"Main.res"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/canvas")," - misc files pertaining to layout"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/components")," - a number of parts of Dark have been componentized. They\nlive here."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/core")," - all the frontend types are defined here, also JSON encoders and\ndecoders for them"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/fluid"),' - fluid is the "editing" portion of the editor, the thing you\ntype code in. All editing of Dark code happens in here'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/forms"),' - the "forms" editor, used for editing any form-like boxes (HTTP\nhandler headings, DB fields, etc). Still recovering from when it was also\nhow we wrote Dark code'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/package")," - the Dark package manager"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/prelude")," - builtin functions that are available in most other files\n(which start with ",(0,a.kt)("inlineCode",{parentName:"li"},"open Prelude"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/toplevels"),' - HTTP handler, workers, REPLs, DBs, functions, etc, are all\n"toplevels"'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/util")," - generic utility code"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"static")," - some assets"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"styles")," - CSS"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test")," - unit tests"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"workers")," - web workers used for analysis and fetching data from the server\nin the background"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"config")," - a set of env vars for each environment. You'll be interested in the\n",(0,a.kt)("inlineCode",{parentName:"li"},"dev")," environment"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"docs")," - sporadic documentation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"docs/production")," - documentation about how we run the Dark service"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"backend"),' - The backend written in F# and .NET. including the language\ndefinition and execution engine, the "framework" (HTTP, DB, queues, etc), the\neditor\'s HTTP API, and the execution engine which runs in the client.',(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".paket")," - Used by the paket/nuget package manager"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Build")," - where the compiler puts compiled code"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"paket-files")," - Used by the paket/nuget package manager"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/ApiServer")," - webserver serving the editor and the API used by the\neditor"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/BackendOnlyStdLib")," - impl. of functions which need to be run on the\nbackend, due to their connection to the DB, queues, etc."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/Benchmark")," - a benchmark executable to measure the performance of Dark\ncode"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/BwdServer")," - webserver that is grand-user facing (at builtwithdark.com)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/ClientTypes")," - type definitions of types that are used in client-server\ncommunication"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/ClientTypes2BackendTypes")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"src/ClientTypes2ExecutionTypes")," -\nmappings between 'internal' types and our client-facing types"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/CronChecker")," - trigger events for scheduled work"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/HttpMiddleware")," - where we define our middlewares used in Dark HTTP\nhandlers"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/LibAnalysis")," -"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/LibBackend")," - the framework functionality (HTTP, DB, queues, traces,\nsecrets, serialization), including standard library functions which only run\non the backend (and not in the client)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/LibBinarySerialization")," - types that we use to store Dark programs to\nour Postgres database"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/LibExecution")," - the Dark language, including types, the runtime, and of\ncourse the execution engine"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/LibExecutionStdLib")," - most of the standard library functions (anything\nthat doesn't ",(0,a.kt)("em",{parentName:"li"},"need")," to be run on the backend)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/LibService")," - library with some common functionality for F# services\n(currently just the backend, soon queues and cron)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/Prelude")," - utilities, libraries, common types; used everywhere"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/QueueWorker")," - pulls user events from the queue and runs them"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/Scripts")," - some simple command-line programs that use F# libraries"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src/Wasm"),' - "main" module for client-side analysis/execution-engine'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tests/FuzzTests")," - code to fuzztest different parts of Dark"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tests/TestUtils")," - utilities used in Tests and FuzzTests"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tests/Tests")," - mostly unit tests for backend and libexecution functionality"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"testfiles/data")," - text and binary files used during various backend tests"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"testfiles/execution")," - unit test definitions for language and standard\nlibrary"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"testfiles/httphandler")," - tests for the Dark HTTP server and middleware"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"testfiles/httpclient")," - tests for the HTTP Library functions"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"integration-tests")," - integration tests, written in JS using TestCafe. Flaky\nand brittle. Help welcome!"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lib")," - build directory used by ReScript"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node_modules")," - installation dir for ",(0,a.kt)("inlineCode",{parentName:"li"},"npm")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rundir")," - anything that runs and stores something stores it here",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"integration_test_logs")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"logs")," - logs from running services, especially ",(0,a.kt)("inlineCode",{parentName:"li"},"fsharp-bwdserver.log")," and\n",(0,a.kt)("inlineCode",{parentName:"li"},"fsharp-apiserver.log")," (backend)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"screenshots")," - for integration tests"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"videos")," - for integration tests"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scripts")," - bash scripts to do common (and sometimes uncommon and therefore\nforgettable) actions on the repo. Using scripts is very very common. Anytime\nthere's something interesting, we add a script to do it. Scripts are\noccasionally out of date.")))}m.isMDXComponent=!0},96804:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/compilation-targets-ba178cf9f6d68148063e5049f33d52d9.png"}}]);