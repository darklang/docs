"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7159],{21620:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var i=s(74848),a=s(28453);const t={title:"F# for Darklang developers"},r=void 0,l={id:"contributing/fsharp-for-dark-developers",title:"F# for Darklang developers",description:"This guide aims to introduce you to enough F# contribute to Darklang, assuming",source:"@site/docs-classic/contributing/fsharp-for-dark-developers.md",sourceDirName:"contributing",slug:"/contributing/fsharp-for-dark-developers",permalink:"/contributing/fsharp-for-dark-developers",draft:!1,unlisted:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs-classic/contributing/fsharp-for-dark-developers.md",tags:[],version:"current",frontMatter:{title:"F# for Darklang developers"},sidebar:"Contributing",previous:{title:"Adding a refactoring",permalink:"/contributing/adding-a-refactoring"},next:{title:"General concepts",permalink:"/contributing/general-concepts"}},d={},o=[{value:"Some simple F# code",id:"some-simple-f-code",level:2},{value:"Darklang vs F#",id:"darklang-vs-f",level:2},{value:"Types",id:"types",level:3},{value:"Functions",id:"functions",level:3},{value:"Standard library",id:"standard-library",level:3},{value:"Int",id:"int",level:3},{value:"Float",id:"float",level:3},{value:"Bool",id:"bool",level:3},{value:"String",id:"string",level:3},{value:"String Interpolation",id:"string-interpolation",level:3},{value:"List",id:"list",level:3},{value:"Records",id:"records",level:3},{value:"Let",id:"let",level:3},{value:"If",id:"if",level:3},{value:"Operators",id:"operators",level:3},{value:"Match",id:"match",level:3},{value:"Variants",id:"variants",level:3},{value:"Lambdas",id:"lambdas",level:3},{value:"Pipes",id:"pipes",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Unit",id:"unit",level:3},{value:"Error handling",id:"error-handling",level:3},{value:"Exceptions",id:"exceptions",level:4},{value:"Imperative programming",id:"imperative-programming",level:3},{value:"Async/Tasks",id:"asynctasks",level:3},{value:"Advanced functions",id:"advanced-functions",level:3},{value:"Partial application / currying",id:"partial-application--currying",level:4},{value:"Darklang&#39;s codebase history",id:"darklangs-codebase-history",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This guide aims to introduce you to enough F# contribute to Darklang, assuming\nyou already know Darklang."}),"\n",(0,i.jsx)(n.h2,{id:"some-simple-f-code",children:"Some simple F# code"}),"\n",(0,i.jsx)(n.p,{children:"Darklang and F# are very similar. Here's an example function in F#:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'let someFunction (intArgument : int) : string =\n  let aString = "myString"\n  let anInt = 65 + intArgument\n  let aFloat = 6.72\n  anotherFunction aString anInt aFloat\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This is a function called ",(0,i.jsx)(n.code,{children:"someFunction"}),", which takes one argument, an ",(0,i.jsx)(n.code,{children:"int"}),"\ncalled ",(0,i.jsx)(n.code,{children:"intArgument"}),", and returns a ",(0,i.jsx)(n.code,{children:"string"}),". Three variables are defined in the\nbody, first a string, then an int, then a float, and finally we call the\n",(0,i.jsx)(n.code,{children:"anotherFunction"})," function with all three parameters as arguments."]}),"\n",(0,i.jsx)(n.p,{children:"In Darklang this would be written:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'someFunction\n  intArgument : Int\n  \u21aa String\n\nlet aString = "myString"\nlet anInt = 65 + intArgument\nlet aFloat = 6.72\nanotherFunction aString anInt aFloat\n'})}),"\n",(0,i.jsx)(n.h2,{id:"darklang-vs-f",children:"Darklang vs F#"}),"\n",(0,i.jsx)(n.p,{children:"Darklang and F# are all influenced by OCaml. Though Darklang is currently a\nsubset of these languages, Darklang will continue to grow some more of their\nfeatures. We'll discuss the similarities and differences as we go through\nlanguage features."}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsx)(n.p,{children:"F# is a strongly typed-languages. Darklang aspires to be, but it doesn't have a\ntype-checker yet. This shows the biggest difference in between working in these\nlanguages, that the compiler will refuse to compile if the types are wrong."}),"\n",(0,i.jsx)(n.p,{children:"F# has type-inference, which means that the compiler will try and figure out\nwhat the types are. Usually type errors actually contain useful information, but\nthey need to be read very carefully to find it."}),"\n",(0,i.jsxs)(n.p,{children:["We've found the best way to debug incorrect types is to add type annotations to\neverything. We add them to all functions (we didn't always do this, but we do\nnow, but we are now), including all parameters and return types (see\n",(0,i.jsx)(n.a,{href:"#functions",children:"example"})," below)."]}),"\n",(0,i.jsx)(n.p,{children:"In F#, you can actually add types in many places where they aren't required,\nsuch as variable definitions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"let y = 6.7\nlet (x : int) = 6\nx + 5\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"x"})," here, despite being a normal variable definition, has a type signature. F#\nallows this in many places, and it's useful for tracking down these errors."]}),"\n",(0,i.jsx)(n.p,{children:"We'll discuss declaring types below."}),"\n",(0,i.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.p,{children:"Functions in F# are defined in the outer scope. Type signatures are optional but\nwe always use them:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'let myFunction (arg1 : int) (arg2 : string) : string =\n  if arg1 < (String.toInt arg2)\n  then "just return a string"\n  else arg2\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"myFunction"})," has two arguments, ",(0,i.jsx)(n.code,{children:"arg1"})," and ",(0,i.jsx)(n.code,{children:"arg2"}),", which are an ",(0,i.jsx)(n.code,{children:"int"})," and\n",(0,i.jsx)(n.code,{children:"string"})," respectively. It returns a ",(0,i.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Like in Darklang, the body of a function is just an expression, and it\nautomatically returns the result of that expression."}),"\n",(0,i.jsxs)(n.p,{children:["(see ",(0,i.jsx)(n.a,{href:"#advanced-functions",children:"below"})," for more details on functions in F#)"]}),"\n",(0,i.jsx)(n.h3,{id:"standard-library",children:"Standard library"}),"\n",(0,i.jsxs)(n.p,{children:["Most of the code in Darklang uses\n",(0,i.jsx)(n.a,{href:"https://github.com/darklang/tablecloth",children:"Tablecloth"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note: for implementing the standard libraries, we do not use Tablecloth as it is\nstill pretty new and may be in flux. Instead, we try to make sure that we use\nlibraries from ",(0,i.jsx)(n.code,{children:".NET"}),", FSharp.Core, or if necessary, the FSharpPlus library."]}),"\n",(0,i.jsx)(n.h3,{id:"int",children:"Int"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"int"})," is the same in Darklang and F#, same syntax, same meaning. Note that\nints are 32-bit in F#, and 64-bit in Darklang."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"let x = 5\nx + 6\n"})}),"\n",(0,i.jsx)(n.h3,{id:"float",children:"Float"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"float"})," is the same in Darklang and F#, both of them are 64-bit floating point\nnumbers."]}),"\n",(0,i.jsxs)(n.p,{children:["To convert from floats to ints use ",(0,i.jsx)(n.code,{children:"Float.toInt"}),", or ",(0,i.jsx)(n.code,{children:"Float.round"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"bool",children:"Bool"}),"\n",(0,i.jsxs)(n.p,{children:["Like in Darklang, ",(0,i.jsx)(n.code,{children:"bool"}),"s in F# are either ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,i.jsx)(n.p,{children:"Strings are Unicode in Darklang and F#. While you're unlikely to hit differences\nin practice, they do actually use a different in-memory representation, with\nDarklang using UTF-8, and F# using .NET's UTF-16."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'let myString = "some string, escaping is allowed\\nwhich dark doesn\'t support yet" in\nmyString\n'})}),"\n",(0,i.jsx)(n.h3,{id:"string-interpolation",children:"String Interpolation"}),"\n",(0,i.jsx)(n.p,{children:"Darklang and F# support string interpolation. In F#:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'let x = 6\nlet y = 7.8\nlet myString = $"some string with x: {x} and also {y}"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"list",children:"List"}),"\n",(0,i.jsxs)(n.p,{children:["Lists in Darklang and F# are almost the same. In F#, lists use ",(0,i.jsx)(n.code,{children:";"})," as\nseparators, like so:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"[1; 2; 3; 4]\n"})}),"\n",(0,i.jsx)(n.p,{children:"(However, F# allows separators to be omitted which the list elements are lined\nup vertically, as it uses indentation as the separator)."}),"\n",(0,i.jsx)(n.p,{children:"While Darklang technically allows you to create lists that have different types\nin them (which you should not do), F# emphatically does not."}),"\n",(0,i.jsxs)(n.p,{children:["To type check a list in F#, you use ",(0,i.jsx)(n.code,{children:"List<int>"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"records",children:"Records"}),"\n",(0,i.jsx)(n.p,{children:"Records are mostly used as objects are in most languages. Like Darklang, they\nonly have fields, not methods, and you use functions to manipulate them."}),"\n",(0,i.jsxs)(n.p,{children:["F# uses a familiar syntax, but with ",(0,i.jsx)(n.code,{children:"="})," instead of ",(0,i.jsx)(n.code,{children:":"}),". It also allows you tes\nuse indentation instead of separators:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'{\n  field1 = 56\n  field2 = true\n  field3 = "asd"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that F# uses ",(0,i.jsx)(n.code,{children:"="})," to connect a field and a value, and ",(0,i.jsx)(n.code,{children:";"})," as row separator.\nThe types of the fields do not have to be declared."]}),"\n",(0,i.jsx)(n.p,{children:"Records are immutable, like almost everything in F#, and are updated using an\nunusual syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"let x = { field1 = 56; field2 = true }\nlet updatedX = { x with field1 = 57 }\ndoSomethingWith updatedX\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that records in Darklang are really dictionaries, which is why you update\nthem with ",(0,i.jsx)(n.code,{children:"Dict::set"}),". We're trying to figure out how to split records and\ndictionaries apart better in Darklang, after which they will be more like F#."]}),"\n",(0,i.jsx)(n.p,{children:"Type definitions for records look like this in F#:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"type Person =\n  {\n    name : string\n  ; age : int\n  }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"let",children:"Let"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"let"}),"s in F# are the same as in Darklang:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"let x = 45\nx + 23\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"let"})," also allow destructing in F#, although we don't currently use that very\noften."]}),"\n",(0,i.jsx)(n.h3,{id:"if",children:"If"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"if"})," statements in F# are extremely similar to Darklang, including that they\nonly allow ",(0,i.jsx)(n.code,{children:"bool"}),"s as the condition, and in their syntax."]}),"\n",(0,i.jsx)(n.p,{children:"In F#:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'if hasAccess user\nthen "Welcome!"\nelse "Access denied"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"operators",children:"Operators"}),"\n",(0,i.jsxs)(n.p,{children:["F# has some unusual operators. Most importantly, the equality operator is ",(0,i.jsx)(n.code,{children:"="}),"\n(that's just one equals sign), whereas in most languages it's ",(0,i.jsx)(n.code,{children:"=="})," (including\nDarklang). ",(0,i.jsx)(n.code,{children:"="})," is very strict equality, equivalent to ",(0,i.jsx)(n.code,{children:"==="})," in languages that\nhave that, such as JS."]}),"\n",(0,i.jsxs)(n.p,{children:["F# also has a ",(0,i.jsx)(n.code,{children:"=="})," operator, but you should never use it."]}),"\n",(0,i.jsxs)(n.p,{children:["F# use ",(0,i.jsx)(n.code,{children:"<>"})," for inequality (",(0,i.jsx)(n.code,{children:"!="})," in Darklang)."]}),"\n",(0,i.jsx)(n.h3,{id:"match",children:"Match"}),"\n",(0,i.jsxs)(n.p,{children:["Darklang has a ",(0,i.jsx)(n.code,{children:"match"})," statement that is very similar to F#, with slightly\ndifferent syntax. In Darklang you write:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"match myValue\n  Some x -> 5\n  _ -> 6\n"})}),"\n",(0,i.jsx)(n.p,{children:"while in F# you write"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"match myValue with\n| Some x -> 5\n| _ -> 6\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Notice the ",(0,i.jsx)(n.code,{children:"with"})," keyword, and starting the patterns with ",(0,i.jsx)(n.code,{children:"|"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["F# also support more powerful ",(0,i.jsx)(n.code,{children:"match"}),"es, for example multiple patterns can match\na single branch:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'match myValue with\n| 4 | 5 | 6 -> "between 4 and 6"\n| _ -> "not between 4 and 6"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["F# also supports the ",(0,i.jsx)(n.code,{children:"when"})," clause:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'match myValue with\n| Some myInt when myInt >= 4 && myInt <= 6 -> "between 4 and 6"\n| _ -> "not between 4 and 6"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"variants",children:"Variants"}),"\n",(0,i.jsxs)(n.p,{children:["Darklang has a handful of enums for ",(0,i.jsx)(n.code,{children:"Option"})," and ",(0,i.jsx)(n.code,{children:"Result"})," types: ",(0,i.jsx)(n.code,{children:"Just"}),",\n",(0,i.jsx)(n.code,{children:"Nothing"}),", ",(0,i.jsx)(n.code,{children:"Ok"})," and ",(0,i.jsx)(n.code,{children:"Error"}),". In the future we will expand this to allow\nuser-defined types as well."]}),"\n",(0,i.jsxs)(n.p,{children:["F# supports the ",(0,i.jsx)(n.code,{children:"Option"})," and ",(0,i.jsx)(n.code,{children:"Result"})," types and we use them a lot. However, the\nconstructors for Option are named differently; both languages use: ",(0,i.jsx)(n.code,{children:"Some"})," and\n",(0,i.jsx)(n.code,{children:"None"})," instead of ",(0,i.jsx)(n.code,{children:"Just"})," and ",(0,i.jsx)(n.code,{children:"Nothing"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:['These enums are typically called "variants". We use them frequently, especially\nto represent expressions. For example in ',(0,i.jsx)(n.code,{children:"FluidExpression.fs"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"type Expr =\n  | EInteger of id * int64\n  | EBool of id * bool\n  | EString of id * string\n  | EFloat of id * string * string\n  | ENull of id\n  | EBlank of id\n  | ELet of id * string * Expr * Expr\n  | EIf of id * Expr * Expr * Expr\n  | EBinOp of id * string * Expr * Expr * sendToRail\n  | ELambda of id * List<(analysisID * string)> * Expr\n  | EFieldAccess of id * Expr * string\n  | EVariable of id * string\n  | EFnCall of id * string * List<Expr> * sendToRail\n  | EList of id * List<Expr>\n  | ERecord of id * (string * Expr) list\n  | EPipe of id * List<Expr>\n  | EConstructor of id * string * List<Expr>\n  | EMatch of id * Expr * List<(MatchPattern * Expr)>\n  | EPipeTarget of id\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'let expr = EInteger (id, "test")\n'})}),"\n",(0,i.jsx)(n.p,{children:"To get values from them, you pattern match:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'match expr with\n| EInteger (_, str) -> str\n| _ -> "not an int"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"lambdas",children:"Lambdas"}),"\n",(0,i.jsx)(n.p,{children:"F# supports lambdas and we use them frequently. They have a different syntax to\nDarklang, F# uses:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"list\n|> List.map (fun elem -> elem + 2)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pipes",children:"Pipes"}),"\n",(0,i.jsx)(n.p,{children:'Both languages have pipes which are the same as in Darklang. In Darklang, the\npassed argument goes into the first position. That is not true F#, where it goes\ninto the last position. As a result, we tend to put the "subject" of the\nfunction in the pipeable position (first in Darklang, last in F#).'}),"\n",(0,i.jsx)(n.h3,{id:"dictionaries",children:"Dictionaries"}),"\n",(0,i.jsxs)(n.p,{children:["Dictionaries (hash-maps, etc) are called ",(0,i.jsx)(n.code,{children:"Map"})," in F#."]}),"\n",(0,i.jsx)(n.h3,{id:"unit",children:"Unit"}),"\n",(0,i.jsxs)(n.p,{children:["F# and Darklang have a ",(0,i.jsx)(n.code,{children:"unit"})," type, whose only member is ",(0,i.jsx)(n.code,{children:"()"}),". That's an actual\nvalue, for example, all this is valid code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"let falseVar = () != () in\n"})}),"\n",(0,i.jsxs)(n.p,{children:["It's typically used to pass to a function which is impure but doesn't have any\nmeaningful arguments, such as ",(0,i.jsx)(n.code,{children:"gid ()"})," (which generates IDs)."]}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error handling"}),"\n",(0,i.jsxs)(n.p,{children:["Typically we use ",(0,i.jsx)(n.code,{children:"Result"})," or ",(0,i.jsx)(n.code,{children:"Option"}),"s for error handling. You'll very commonly\nsee something like"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"let isRailable (m : model) (name : string) =\n  m.functions\n  |> Functions.find name\n  |> Option.map (fun fn ->\n         fn.fnReturnTipe = TOption || fn.fnReturnTipe = TResult)\n  |> Option.withDefault false\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To find out if a function goes on the error rail, we search for a function,\nwhich returns an Option. We then use a ",(0,i.jsx)(n.code,{children:"map"})," to operate on the option, and\nfinally choose a default in case the Option returned ",(0,i.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"exceptions",children:"Exceptions"}),"\n",(0,i.jsx)(n.p,{children:"F# has exceptions - thought we'd like to use them less."}),"\n",(0,i.jsx)(n.p,{children:"Unfortunately, it's hard to tell when an exception could be thrown."}),"\n",(0,i.jsx)(n.h3,{id:"imperative-programming",children:"Imperative programming"}),"\n",(0,i.jsx)(n.p,{children:"F# supports imperative programming which Darklang does not support yet."}),"\n",(0,i.jsx)(n.p,{children:"F# has mutable values that it prefers to refs (it has refs, but they're\ndeprecated). Mutable values are used like so:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'let mutable myString = "old value"\nmyString <- "new value"\nprint(myString)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"asynctasks",children:"Async/Tasks"}),"\n",(0,i.jsxs)(n.p,{children:["For functions that perform IO, you'll need to use the ",(0,i.jsx)(n.code,{children:"uply"})," or ",(0,i.jsx)(n.code,{children:"task"}),'\n"computation expression". A "computation expression" is a special F# language\nfeature for writing abstractions with a nice syntax. The ',(0,i.jsx)(n.code,{children:"uply"})," CE allows using\na specialized asynchronous structure called Ply (which is extremely similar to a\n.Net Task) easily, and can best be illustrated with an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"  (function\n  | state, [ DObj value; DStr key; DDB dbname ] ->\n      uply {\n        let db = state.dbs.[dbname]\n        let! _id = UserDB.set state true db key value\n        return DObj value\n      }\n  | _ -> incorrectArgs ())\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's break this down line by line:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"uply {"}),": this creates the CE, whose return value will be a ",(0,i.jsx)(n.code,{children:"Ply<'any>"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"let db = state.dbs.[dbname]"})," - this is just regular F# code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"let! _id = UserDB.set state true db key value"})," - the special thing here is\nthe ",(0,i.jsx)(n.code,{children:"let!"})," - this line calls ",(0,i.jsx)(n.code,{children:"UserDB.set"}),", a function which returns a ",(0,i.jsx)(n.code,{children:"Ply"}),",\nand unwraps the ",(0,i.jsx)(n.code,{children:"Ply"}),". This means that ",(0,i.jsx)(n.code,{children:"_id"})," can be treated as a normal value\nfor the rest of this ",(0,i.jsx)(n.code,{children:"taskv"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"return DObj value"})," - return takes an ordinary value and turns it into a\n",(0,i.jsx)(n.code,{children:"Ply"}),", in this case a ",(0,i.jsx)(n.code,{children:"Ply<Dval>"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Why do we go through all this trouble? Because this is an async runtime, and\n",(0,i.jsx)(n.code,{children:"let!"})," and ",(0,i.jsx)(n.code,{children:"return"})," are the enablers of the asynchronicity. A ",(0,i.jsx)(n.code,{children:"Ply"})," is a\npromise, and ",(0,i.jsx)(n.code,{children:"let!"})," waits for the promise and then continues (running other code\nwhile the IO is still pending). This is the exact same as the ",(0,i.jsx)(n.code,{children:"async"})," keyword in\nJS, Rust, C# or Python."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that while we primarily use ",(0,i.jsx)(n.code,{children:"Ply"})," and ",(0,i.jsx)(n.code,{children:"uply"})," inside the Interpreter, most\nof our other async code use ",(0,i.jsx)(n.code,{children:"Task"})," and ",(0,i.jsx)(n.code,{children:"task"}),". These are interchangeable except\nthat Tasks are a little slower."]}),"\n",(0,i.jsx)(n.h3,{id:"advanced-functions",children:"Advanced functions"}),"\n",(0,i.jsx)(n.h4,{id:"partial-application--currying",children:"Partial application / currying"}),"\n",(0,i.jsx)(n.p,{children:"Occasionally you'll see a function called with fewer arguments than it has\nparameters:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"let myFunction (param1: int) (param2 : string) =\n  ...body...\n\nlet myOtherFunction = myFunction 6\n"})}),"\n",(0,i.jsxs)(n.p,{children:['This is called "partial application", in that the function is only partially\ncalled (this is often called ',(0,i.jsx)(n.em,{children:"Currying"})," in the functional language community).\nThis just means that some parameters are filled in, and you now have a function\nwhich can be called with the remaining parameters:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:'let () =\n  myOtherfunction "final argument"\n'})}),"\n",(0,i.jsx)(n.p,{children:"This is the same as if it were defined as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-fsharp",children:"let myOtherFunction (param : string) =\n  myFunction 6 param\n"})}),"\n",(0,i.jsx)(n.h2,{id:"darklangs-codebase-history",children:"Darklang's codebase history"}),"\n",(0,i.jsxs)(n.p,{children:["Darklang's backend was originally written in OCaml, and then ported to F# in\n2021/2022. A lot of code is written the way it is because that made sense in\nOCaml, especially code with the comment ",(0,i.jsx)(n.code,{children:"// CLEANUP"})," in it."]}),"\n",(0,i.jsx)(n.p,{children:"Darklang's frontend was originally written in Elm, before being ported to\nReScript. It was removed in 2023."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(96540);const a={},t=i.createContext(a);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);