"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2708],{20775:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"contributing/adding-a-language-feature","title":"Adding a language feature","description":"There are a number of","source":"@site/docs-classic/contributing/adding-a-language-feature.md","sourceDirName":"contributing","slug":"/contributing/adding-a-language-feature","permalink":"/contributing/adding-a-language-feature","draft":false,"unlisted":false,"editUrl":"https://github.com/darklang/docs/edit/main/docs-classic/contributing/adding-a-language-feature.md","tags":[],"version":"current","frontMatter":{"title":"Adding a language feature"},"sidebar":"Contributing","previous":{"title":"Adding a built-in function","permalink":"/contributing/adding-a-function"},"next":{"title":"Adding a refactoring","permalink":"/contributing/adding-a-refactoring"}}');var a=i(74848),r=i(28453);const s={title:"Adding a language feature"},o=void 0,d={},l=[{value:"Overview",id:"overview",level:3},{value:"Backend",id:"backend",level:2},{value:"Execution",id:"execution",level:3},{value:"Serialization",id:"serialization",level:3},{value:"Expressions are add-only",id:"expressions-are-add-only",level:4},{value:"Editor support",id:"editor-support",level:2},{value:"Fluid Editor",id:"fluid-editor",level:3},{value:"Adding tokens",id:"adding-tokens",level:4},{value:"AST transformations",id:"ast-transformations",level:3},{value:"Client/backend communication",id:"clientbackend-communication",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["There are a number of\n",(0,a.jsx)(n.a,{href:"https://github.com/darklang/dark/issues?q=is%3Aissue+is%3Aopen+label%3Alanguage-feature",children:"language features that we'd like to add"}),"\nto Darklang. While there a quite a few steps involved in adding a language\nfeature, they're typically relatively straightforward to add once you've figured\nout the Darklang codebase."]}),"\n",(0,a.jsx)(n.p,{children:"It's important to note that the most important part of a language feature is\ngetting agreement on what it does. We typically write specs for features, and\nensure that we have resolved how edge cases should work, as well as ensuring it\nmeshes with the rest of the language and language definition. If you're\ninterested in creating a language feature, you should engage with Paul Biggar\nearly and often."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["See also:\n",(0,a.jsx)(n.a,{href:"https://www.youtube.com/watch?v=HZk4yCF8DWQL",children:"a pairing session where we added Tuples to the Darklang client and backend"})]})}),"\n",(0,a.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["Most language features will need to be added to our language definition. The\nlanguage definition is\n",(0,a.jsx)(n.a,{href:"https://github.com/darklang/dark/blob/main/backend/src/LibExecution/ProgramTypes.fs",children:(0,a.jsx)(n.code,{children:"Expr"})}),',\nwhich represent a Darklang expression (which in turn contains other Darklang\nexpressions). This is commonly known as an "Abstract Syntax Tree" (or AST).']}),"\n",(0,a.jsxs)(n.p,{children:["At time of writing, the definition of ",(0,a.jsx)(n.code,{children:"Expr"})," was"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fsharp",children:"type Expr =\n  | EInteger of id * bigint\n  | EBool of id * bool\n  | EString of id * string\n  | ECharacter of id * string\n  // allow the user to have arbitrarily big numbers, even if they don't make sense as floats\n  | EFloat of id * Sign * bigint * bigint\n  | ENull of id\n  | EBlank of id\n  | ELet of id * string * Expr * Expr\n  | EIf of id * Expr * Expr * Expr\n  | EBinOp of id * FQFnName.T * Expr * Expr * SendToRail\n  | ELambda of id * List<id * string> * Expr\n  | EFieldAccess of id * Expr * string\n  | EVariable of id * string\n  | EFnCall of id * FQFnName.T * List<Expr> * SendToRail\n  | EPartial of id * string * Expr\n  | ERightPartial of id * string * Expr\n  | ELeftPartial of id * string * Expr\n  | EList of id * List<Expr>\n  | ERecord of id * List<string * Expr>\n  | EPipe of id * Expr * Expr * List<Expr>\n  | EConstructor of id * string * List<Expr>\n  | EMatch of id * Expr * List<Pattern * Expr>\n  | EPipeTarget of id\n  | EFeatureFlag of id * string * Expr * Expr * Expr\n  | ETuple of id * Expr * Expr * List<Expr>\n"})}),"\n",(0,a.jsx)(n.p,{children:"The backend does the work of executing the expressions, and saving programs. The\nexecution engine is also compiled to WebAssembly in order to be available in the\nclient."}),"\n",(0,a.jsx)(n.p,{children:'The client is responsible for editing programs. Typically, adding a language\nfeature means adding support for it to the many transformations that the client\ndoes, including refactorings, renamings, etc. It will also need support in the\n"Fluid" editor, which is where users actually type code.'}),"\n",(0,a.jsx)(n.h2,{id:"backend",children:"Backend"}),"\n",(0,a.jsx)(n.h3,{id:"execution",children:"Execution"}),"\n",(0,a.jsxs)(n.p,{children:["The execution of the language is defined in\n",(0,a.jsx)(n.a,{href:"https://github.com/darklang/dark/blob/main/backend/src/LibExecution/Interpreter.fs",children:(0,a.jsx)(n.code,{children:"backend/src/LibExecution/Interpreter.fs:eval"})}),".\n",(0,a.jsx)(n.code,{children:"eval"})," does the work of converting an expressions into a ",(0,a.jsx)(n.code,{children:"dval"})," -- a Darklang\nvalue."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, ",(0,a.jsx)(n.code,{children:"DInt"})," is the run-time value of an integer, while ",(0,a.jsx)(n.code,{children:"EInteger"})," is the\nexpression that represents an integer. ",(0,a.jsx)(n.code,{children:"eval"})," converts from an ",(0,a.jsx)(n.code,{children:"EInteger"})," that\nthe programmer added to their program, into a ",(0,a.jsx)(n.code,{children:"DInt"})," that can be operated on\n(added, subtracted, etc)."]}),"\n",(0,a.jsxs)(n.p,{children:["As another example, an ",(0,a.jsx)(n.code,{children:"ELet"})," is a ",(0,a.jsx)(n.code,{children:"let"})," statement in Darklang. When you see"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fsharp",children:"let x = 6\nx + 4\n"})}),"\n",(0,a.jsxs)(n.p,{children:["you have an ",(0,a.jsx)(n.code,{children:'ELet ("x", EInteger 6, EBinOp ("+", EVariable "x", EInteger 4))'}),".\nWhen we execute this ",(0,a.jsx)(n.code,{children:"ELet"}),", we first execute the ",(0,a.jsx)(n.code,{children:"6"}),", creating a ",(0,a.jsx)(n.code,{children:"dval"})," of\n",(0,a.jsx)(n.code,{children:"DInt 6"}),", which we then store as ",(0,a.jsx)(n.code,{children:"x"}),' in a "symbol table". We then execute\n',(0,a.jsx)(n.code,{children:"x + 4"})," using the symbol table with our known value of ",(0,a.jsx)(n.code,{children:"x = 6"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"dval"}),"s are defined in\n",(0,a.jsx)(n.a,{href:"https://github.com/darklang/dark/blob/main/backend/src/LibExecution/RuntimeTypes.fs",children:(0,a.jsx)(n.code,{children:"backend/src/LibExecution/RuntimeTypes.fs"})}),"\nand expressions are defined in\n",(0,a.jsx)(n.a,{href:"https://github.com/darklang/dark/blob/main/backend/src/LibExecution/ProgramTypes.fs",children:(0,a.jsx)(n.code,{children:"backend/src/LibExecution/ProgramTypes.fs"})}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"serialization",children:"Serialization"}),"\n",(0,a.jsx)(n.p,{children:"The other main purpose of the backend is to save programs. Darklang uses a fast\nbinary serialization format, derived directly from expressions. This means you\ndo not have to do anything special to allow users to save your new expression."}),"\n",(0,a.jsx)(n.h4,{id:"expressions-are-add-only",children:"Expressions are add-only"}),"\n",(0,a.jsx)(n.p,{children:"The automatic serialization has a caveat: the serializer has some rules to\nmaintain compatibility with existing Darklang programs. You can add new\nexpression types to it, but you can't change existing ones. This means that if\nyou want to change a language feature to make it more powerful, you need to\ninstead add a new version of it, rather than editing the current version."}),"\n",(0,a.jsx)(n.p,{children:"We do have the ability to remove old formats, but it is a little challenging to\ncoordinate. Whenever we do this, it is always after the new replacement feature\nis live and stable, and then we go in and remove the old one."}),"\n",(0,a.jsxs)(n.p,{children:["These rules apply to anything using the serializers, which currently includes\nboth ",(0,a.jsx)(n.code,{children:"expr"}),"s and ",(0,a.jsx)(n.code,{children:"tipe"}),"s."]}),"\n",(0,a.jsx)(n.h2,{id:"editor-support",children:"Editor support"}),"\n",(0,a.jsx)(n.p,{children:"The editor is where the developer (a Darklang user) actually creates code."}),"\n",(0,a.jsx)(n.h3,{id:"fluid-editor",children:"Fluid Editor"}),"\n",(0,a.jsx)(n.p,{children:'The "fluid" editor is the subpart of the client where users type code. It\nhandles keypresses and the AST transformations that they cause.'}),"\n",(0,a.jsxs)(n.p,{children:["For example: if you have the code (with the cursor denoted as ",(0,a.jsx)(n.code,{children:"|"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-fsharp",children:"let x = |6\nx + 4\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Pressing ",(0,a.jsx)(n.code,{children:"1"})," with your cursor here makes the editor look up the current\nexpression, and add a ",(0,a.jsx)(n.code,{children:"1"})," to the front of it. Here that converts ",(0,a.jsx)(n.code,{children:"6"})," into ",(0,a.jsx)(n.code,{children:"16"}),"."]}),"\n",(0,a.jsx)(n.p,{children:'Over time we intend to expand the Fluid Editor for all "coding" text entry.'}),"\n",(0,a.jsx)(n.h4,{id:"adding-tokens",children:"Adding tokens"}),"\n",(0,a.jsxs)(n.p,{children:['The FluidEditor works as a sort of "reverse parser". Instead of reading text and\nfiguring out meaning, it instead takes the AST and pretty-prints it into a set\nof ',(0,a.jsx)(n.code,{children:"FluidToken"}),"s. These tokens are stringified, showing the user textual code."]}),"\n",(0,a.jsxs)(n.p,{children:["The tokens also tied the current edit back to an expression. In the example\nabove, the cursor is at the start of a ",(0,a.jsx)(n.code,{children:"TInteger"})," token, which ties the current\nposition back to the ",(0,a.jsx)(n.code,{children:"EInteger"})," expression that defines it."]}),"\n",(0,a.jsx)(n.p,{children:"To add a language feature, you will often need to add new tokens. You will\noccasionally reuse some tokens, but most features use dedicated tokens so that\nthere's no ambiguity."}),"\n",(0,a.jsxs)(n.p,{children:["You add tokens in\n",(0,a.jsx)(n.a,{href:"https://github.com/darklang/dark/blob/main/client/src/fluid/FluidTypes.res",children:(0,a.jsx)(n.code,{children:"client/src/fluid/FluidTypes.res"})}),"\nand keystrokes are handled in\n",(0,a.jsx)(n.a,{href:"https://github.com/darklang/dark/blob/main/client/src/fluid/Fluid.res",children:(0,a.jsx)(n.code,{children:"client/src/fluid/Fluid.res:updateKey"})}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"ast-transformations",children:"AST transformations"}),"\n",(0,a.jsx)(n.p,{children:"Once you have added the expression and the tokens, you will need to support\nexisting features. Mostly, this means that existing AST transformations and\nrefactorings should continue to work. These are typically either explicit (via\nthe command palette) or implicit (by renaming a variable)."}),"\n",(0,a.jsxs)(n.p,{children:["You will be able to find almost everywhere that this is needed when you add the\ndefinition to ",(0,a.jsx)(n.code,{children:"Expr"}),". The compiler will warn you at every place that you have\nnot handled it."]}),"\n",(0,a.jsx)(n.h2,{id:"clientbackend-communication",children:"Client/backend communication"}),"\n",(0,a.jsx)(n.p,{children:"The client sends ASTs to the backend to save and to run the programs in the\ncloud. The client also fetches expressions from the backend to display and edit\nthem. It does this over JSON."}),"\n",(0,a.jsxs)(n.p,{children:["Any types used in client-server communication (e.g. for API calls) are generally\nprotected from accidentally updating a type and causing breakage in\ncommunication. In the backend, a\n",(0,a.jsx)(n.a,{href:"https://github.com/darklang/dark/blob/main/backend/src/ClientTypes",children:(0,a.jsx)(n.code,{children:"ClientTypes"})}),"\nproject is defined where these types live. These include core types such as in\nthe ",(0,a.jsx)(n.code,{children:"ClientTypes.ProgramTypes"})," module that may be used throughout client/server\ncommunciation, as well as types specific to one use case, such as in\n",(0,a.jsx)(n.code,{children:"ClientTypes.Api"}),". Adjacent projects ",(0,a.jsx)(n.code,{children:"ClientTypes2ExecutionTypes"})," and\n",(0,a.jsx)(n.code,{children:"ClientTypes2BackendTypes"})," are used to map between 'internal' types and the\n",(0,a.jsx)(n.code,{children:"ClientTypes"})," that are used in client-server communication. These ",(0,a.jsx)(n.code,{children:"ClientTypes"}),'\nare individually registered as types we allow to be serialized/deserialized\nthrough our "Vanilla" JSON serializer, which is based on ',(0,a.jsx)(n.code,{children:"System.Text.Json"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In the client, encoders and decoders are hand-written to match the ",(0,a.jsx)(n.code,{children:"ClientTypes"}),"\ndefined in the backend. Many of these exist in ",(0,a.jsx)(n.code,{children:"client/src/core"}),", and others are\nspread throughout the codebase wherever client/server communication happens\n(e.g. in ",(0,a.jsx)(n.code,{children:"client/src/api"}),")."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(96540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);