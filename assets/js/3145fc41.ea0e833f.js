"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2902],{77921:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"tutorials/create-daily-job-cron-handler","title":"Tutorial: Create a daily job with a Cron handler","description":"Now that we\'re storing requests, we can use a scheduled job (a \\"Cron\\", named","source":"@site/docs-classic/tutorials/05-create-daily-job-cron-handler.md","sourceDirName":"tutorials","slug":"/tutorials/create-daily-job-cron-handler","permalink":"/tutorials/create-daily-job-cron-handler","draft":false,"unlisted":false,"editUrl":"https://github.com/darklang/docs/edit/main/docs-classic/tutorials/05-create-daily-job-cron-handler.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Tutorial: Create a daily job with a Cron handler","sidebar_label":"Create a daily job with a Cron handler","id":"create-daily-job-cron-handler"},"sidebar":"docs","previous":{"title":"Save data to a Datastore","permalink":"/tutorials/save-data-to-datastore"},"next":{"title":"Process background jobs in a Worker","permalink":"/tutorials/process-background-jobs-worker"}}');var r=s(74848),i=s(28453);const o={title:"Tutorial: Create a daily job with a Cron handler",sidebar_label:"Create a daily job with a Cron handler",id:"create-daily-job-cron-handler"},a=void 0,d={},c=[];function l(e){const t={a:"a",code:"code",img:"img",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:['Now that we\'re storing requests, we can use a scheduled job (a "Cron", named\nafter the Unix ',(0,r.jsx)(t.code,{children:"cron"})," utility) to create a report of all requests per day."]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Hit the plus (",(0,r.jsx)(t.code,{children:"+"}),") button (or use the omnibox) to create a new Cron. Set it\nto run daily, and with the name ",(0,r.jsx)(t.code,{children:"DailyReport"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img/gettingstarted/crondaily.png",src:s(41776).A+"",width:"896",height:"198"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["To know if a request was executed today, we compare it to the current time.\nLet's assign the current time in seconds to a variable ",(0,r.jsx)(t.code,{children:"timeSeconds"}),". The\ncurrent time in seconds is ",(0,r.jsx)(t.code,{children:"Date::now"}),", piped into ",(0,r.jsx)(t.code,{children:"Date::toSeconds"}),". (Note:\nto create a pipe, type ",(0,r.jsx)(t.code,{children:"|>"})," after the ",(0,r.jsx)(t.code,{children:"Date::now"})," function)."]}),"\n",(0,r.jsxs)(t.p,{children:["Run the ",(0,r.jsx)(t.code,{children:"Date::now"})," function to see a live value for your code."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img/gettingstarted/cron_timeseconds.png",src:s(99240).A+"",width:"822",height:"244"})}),"\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsxs)(t.li,{children:["Next, we'll need to filter the reports to just today's reports. Set\n",(0,r.jsx)(t.code,{children:"allRequests"})," to ",(0,r.jsx)(t.code,{children:"DB::getAll Requests"}),". Run the function to the live value\nfor ",(0,r.jsx)(t.code,{children:"allRequests"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img/gettingstarted/allrequests.png",src:s(16264).A+"",width:"1412",height:"806"})}),"\n",(0,r.jsxs)(t.ol,{start:"4",children:["\n",(0,r.jsxs)(t.li,{children:["To see only today's requests, use ",(0,r.jsx)(t.code,{children:"List::filter"}),". ",(0,r.jsx)(t.code,{children:"List::filter"})," takes two\narguments - the list to filter (in this case ",(0,r.jsx)(t.code,{children:"allRequests"}),") and an anonymous\nfunction that determines if each element of the list element should be\nincludes in the new list. ",(0,r.jsx)(t.code,{children:"List::filter"})," is similar to ",(0,r.jsx)(t.code,{children:"List::map"})," and the\nconcept is explained in more detail\n",(0,r.jsx)(t.a,{href:"https://docs.darklang.com/discussion/functional-aspects",children:"here"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img/gettingstarted/listefilter.png",src:s(14577).A+"",width:"1064",height:"320"})}),"\n",(0,r.jsxs)(t.ol,{start:"5",children:["\n",(0,r.jsxs)(t.li,{children:["We want to keep only reports that occurred today, meaning we want to compare\nthe report's time to ",(0,r.jsx)(t.code,{children:"timeSeconds"})," that we created earlier. Let's convert the\ntime of the request into seconds so that both times have the same units."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img/gettingstarted/requestseconds.png",src:s(97237).A+"",width:"1194",height:"430"})}),"\n",(0,r.jsxs)(t.ol,{start:"6",children:["\n",(0,r.jsx)(t.li,{children:"Next, we calculate the difference from the current time; this tells us if it\nhappened today (in the last 86,400 seconds)."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img/gettingstarted/comparison.png",src:s(51436).A+"",width:"1296",height:"488"})}),"\n",(0,r.jsxs)(t.ol,{start:"7",children:["\n",(0,r.jsxs)(t.li,{children:["To see this work, it's helpful to have a recent request. If you paused in the\ntutorial, re-run the ",(0,r.jsx)(t.code,{children:"HttpClient::post"})," function from the REPL. Then, when\nyou place your cursor in ",(0,r.jsx)(t.code,{children:"todayRequests"})," or ",(0,r.jsx)(t.code,{children:"List::filter"})," you'll see a list\nof requests from the last 24 hours."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img/gettingstarted/todayrequest.png",src:s(429).A+"",width:"1918",height:"594"})}),"\n",(0,r.jsxs)(t.ol,{start:"8",children:["\n",(0,r.jsxs)(t.li,{children:["Finally, let's emit today's requests to a background worker, using the ",(0,r.jsx)(t.code,{children:"emit"}),"\nkeyword. ",(0,r.jsx)(t.code,{children:"emit"})," takes two arguments, and in this case we're sending\n",(0,r.jsx)(t.code,{children:"todayRequests"})," to a not-yet-created worker named ",(0,r.jsx)(t.code,{children:"storeReport"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img/gettingstarted/emit.png",src:s(77630).A+"",width:"1318",height:"460"})}),"\n",(0,r.jsxs)(t.ol,{start:"9",children:["\n",(0,r.jsxs)(t.li,{children:['To have our first report run, hit the "replay" button in the upper right of\nthe Cron. This creates a 404 in the sidebar for the Worker ',(0,r.jsx)(t.code,{children:"storeReport"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},16264:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/allrequests-e37b0238afe387fc274d483cc640dc55.png"},51436:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/comparison-090019c28235433db9bfaf691525ecd9.png"},99240:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/cron_timeseconds-ad78ad557c400b3636ed19921d98d05e.png"},41776:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/crondaily-dee48e04d5cc6e64dee758c53720f459.png"},77630:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/emit-06eee1e39c4d988ac808eb09ff198afa.png"},14577:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/listfilter-74d3e1c691e047fcebedd489004f9ca1.png"},97237:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/requestseconds-47da4b7f6d329c1505ac1d92f797003e.png"},429:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/todayrequest-4978f14b345e76c3e43c3ac2744a57bd.png"},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(96540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);