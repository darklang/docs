"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8143],{70660:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>l});var o=n(85893),r=n(11151);const i={title:"Making your first Pull Request"},s=void 0,u={id:"contributing/making-your-first-pull-request",title:"Making your first Pull Request",description:"Right now you've got uncommitted code, let's get that into a Pull Request on",source:"@site/docs-classic/contributing/making-your-first-pull-request.md",sourceDirName:"contributing",slug:"/contributing/making-your-first-pull-request",permalink:"/contributing/making-your-first-pull-request",draft:!1,unlisted:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs-classic/contributing/making-your-first-pull-request.md",tags:[],version:"current",frontMatter:{title:"Making your first Pull Request"},sidebar:"Contributing",previous:{title:"Adding your first test",permalink:"/contributing/adding-your-first-test"},next:{title:"Your next contribution",permalink:"/contributing/next-contribution"}},a={},l=[{value:"Formatting the code",id:"formatting-the-code",level:2},{value:"Set up your fork",id:"set-up-your-fork",level:2},{value:"Push",id:"push",level:2},{value:"Make the Pull Request",id:"make-the-pull-request",level:2}];function c(t){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"Right now you've got uncommitted code, let's get that into a Pull Request on\nGitHub."}),"\n",(0,o.jsx)(e.h2,{id:"formatting-the-code",children:"Formatting the code"}),"\n",(0,o.jsxs)(e.p,{children:["We use a code formatter on all our files, and this is tested during CI on all\nPRs. To format, call ",(0,o.jsx)(e.code,{children:"scripts/formatting/format format"}),". There is also a\n",(0,o.jsx)(e.a,{href:"https://github.com/darklang/dark/blob/56a800909195829ef757e9a4444409af14c171ac/scripts/formatting/pre-commit-hook.sh",children:"git hook you can use"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"set-up-your-fork",children:"Set up your fork"}),"\n",(0,o.jsxs)(e.p,{children:["Darklang uses a fork model for contributions, like many GitHub projects. Go to\nthe ",(0,o.jsx)(e.a,{href:"https://darklang.com/darklang/dark",children:"Dark repo"})," in your browser and click\n",(0,o.jsx)(e.code,{children:"fork"})," to add a fork."]}),"\n",(0,o.jsx)(e.p,{children:"Then change your local repo to use the fork:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"git remote rm origin\ngit remote add origin https://github.com/myGitHubUsername/dark.git\n"})}),"\n",(0,o.jsx)(e.h2,{id:"push",children:"Push"}),"\n",(0,o.jsx)(e.p,{children:"Finally commit and push"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'git add backend\ngit commit -m "Add test for List::member"\ngit push --set-upstream origin first-contribution\n'})}),"\n",(0,o.jsx)(e.h2,{id:"make-the-pull-request",children:"Make the Pull Request"}),"\n",(0,o.jsx)(e.p,{children:"Go back to GitHub and make a pull request. Here's a good message for your pull\nrequest:"}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:'"Hi - this is my first pull request. I noticed that List::member didn\'t have\nany tests so I added one."'}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["While this doesn't follow our\n",(0,o.jsx)(e.a,{href:"/contributing/making-a-pull-request#writing-a-successful-pull-request-message",children:"Pull Request guidelines"}),",\nit's fine for a first contribution (and you can ignore the PR template too for\nnow)."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"And that's your first PR - congratulations!"})}),"\n",(0,o.jsx)(e.p,{children:"(Note that if you haven't signed the CLA, a bot will prompt you to do so now.)"})]})}function d(t={}){const{wrapper:e}={...(0,r.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}},11151:(t,e,n)=>{n.d(e,{Z:()=>u,a:()=>s});var o=n(67294);const r={},i=o.createContext(r);function s(t){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function u(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),o.createElement(i.Provider,{value:e},t.children)}}}]);