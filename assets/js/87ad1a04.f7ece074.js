"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[948],{26375:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var a=t(85893),r=t(11151);const s={title:"Built-In Types",sidebar_label:"Built-In Types",sidebar_position:1,keywords:["types","conversion"],draft:!1},i=void 0,l={id:"reference/language-reference/built-in-types/built-in-types",title:"Built-In Types",description:"The darklang type system is based on functional languages such as F#.",source:"@site/docs/reference/language-reference/built-in-types/built-in-types.md",sourceDirName:"reference/language-reference/built-in-types",slug:"/reference/language-reference/built-in-types/",permalink:"/next/reference/language-reference/built-in-types/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Built-In Types",sidebar_label:"Built-In Types",sidebar_position:1,keywords:["types","conversion"],draft:!1},sidebar:"myAutogeneratedSidebar",previous:{title:"Language Reference",permalink:"/next/reference/language-reference/"},next:{title:"Bool",permalink:"/next/reference/language-reference/built-in-types/bool"}},c={},o=[{value:"Float",id:"float",level:3},{value:"Character",id:"character",level:3},{value:"String",id:"string",level:3}];function d(e){const n={admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"The darklang type system is based on functional languages such as F#."}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsx)(n.p,{children:"The type system is being developed. The documentation presented here reflects\nthe goal and may differ from current system behavior. Contributions are welcome\nto speed delivery."})}),"\n",(0,a.jsx)(n.h3,{id:"float",children:"Float"}),"\n",(0,a.jsx)(n.p,{children:"Floats are double-precision 64-bit floating-point values (IEEE 754)."}),"\n",(0,a.jsx)(n.p,{children:"Any variable with a decimal is a Float. In the following code, each of the\nvariables is Float typed:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-darklang",children:"let x = 3.14\nlet y = 3.0\nlet z = 3.\nlet w = -123.456E-789\n"})}),"\n",(0,a.jsx)(n.h3,{id:"character",children:"Character"}),"\n",(0,a.jsxs)(n.p,{children:["A character in Darklang represents a character that you see on your screen, such\nas ",(0,a.jsx)(n.code,{children:"a"}),", ",(0,a.jsx)(n.code,{children:"1"}),", ",(0,a.jsx)(n.code,{children:"\u017b"}),", ",(0,a.jsx)(n.code,{children:"\ud83c\uddf5\ud83c\uddf7"}),", ",(0,a.jsx)(n.code,{children:"\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66"}),". This is in contrast to most languages, where a\ncharacter represents one byte, or perhaps a Unicode codepoint."]}),"\n",(0,a.jsx)(n.p,{children:"The technical name for a Darklang character is an Extended Grapheme Cluster and\ncan best be thought of as supporting the entire character you see in front of\nyou. In the case of an emoji, this includes combining characters and skin tones.\nSee [String](### String) for additional context."}),"\n",(0,a.jsx)(n.p,{children:"Simple Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-darklang",children:"let char = 'a'\n"})}),"\n",(0,a.jsx)(n.p,{children:"Escaped Character Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-darklang",children:"let quote = '\\''\nlet backslash = '\\\\'\nlet newline = '\\n'\nlet return = '\\r'\nlet tab = '\\t'\n"})}),"\n",(0,a.jsx)(n.p,{children:"Unicode Byte Value Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-darklang",children:"let Z = \\x005A\nlet O_with_Diaeresis = \\x00D6 # \xd6\n"})}),"\n",(0,a.jsx)(n.p,{children:"Multi-byte Character Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-darklang",children:"let happy_face = \\x1F600  # \ud83d\ude00\n"})}),"\n",(0,a.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,a.jsx)(n.p,{children:"A String is unicode text. Specifically, strings are immutable sequences of UTF-8\ncode points. This differs from a character which is a single unicode code point\n(single visual character)."}),"\n",(0,a.jsx)(n.p,{children:"Strings are enclosed in double quotes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-darklang",children:'let name = "Darklang"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var a=t(67294);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);