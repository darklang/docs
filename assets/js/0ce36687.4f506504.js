"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1926],{3905:(e,t,n)=>{n.d(t,{kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={},l="HTTP Framework",p={unversionedId:"reference/framework/http-framework",id:"reference/framework/http-framework",title:"HTTP Framework",description:"HTTP requests to a Darklang application are automatically routed to handlers in",source:"@site/docs/reference/framework/http-framework.md",sourceDirName:"reference/framework",slug:"/reference/framework/http-framework",permalink:"/reference/framework/http-framework",draft:!1,editUrl:"https://github.com/darklang/docs/edit/main/docs/reference/framework/http-framework.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"HTTP Client",permalink:"/reference/httpclient"},next:{title:"Datastores",permalink:"/reference/framework/datastores"}},u={},d=[{value:"Routing",id:"routing",level:2},{value:"Request variables",id:"request-variables",level:2},{value:"Dynamic routes",id:"dynamic-routes",level:3},{value:"Traces",id:"traces",level:2},{value:"Responses",id:"responses",level:2}],c={toc:d};function h(e){var t=e.components,s=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"http-framework"},"HTTP Framework"),(0,i.kt)("p",null,"HTTP requests to a Darklang application are automatically routed to handlers in\nyour canvas."),(0,i.kt)("h2",{id:"routing"},"Routing"),(0,i.kt)("p",null,"If your canvas is ",(0,i.kt)("inlineCode",{parentName:"p"},"myusername-app1"),", then requests to\n",(0,i.kt)("inlineCode",{parentName:"p"},"https://myusername-app1.builtwithdark.com"),", with any path, will go to your\ncanvas."),(0,i.kt)("p",null,"Each handler has a HTTP method (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"GET"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"POST"),", etc) - anything is\nallowed here since HTTP allows any method, and the autocomplete will provide the\nmost common as options."),(0,i.kt)("p",null,"Each handler has a route, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/paul"),"."),(0,i.kt)("p",null,"If a request's path does not match any handler's route, Darklang will respond\nwith a 404. A trace for this request is stored and shown in the 404 list in the\nsidebar, which can be turned into a handler."),(0,i.kt)("p",null,"Requests starting in ",(0,i.kt)("inlineCode",{parentName:"p"},"http://")," will result in a 302 redirect to the ",(0,i.kt)("inlineCode",{parentName:"p"},"https://"),"\nequivalent."),(0,i.kt)("p",null,"We have a built-in favicon to respond to ",(0,i.kt)("inlineCode",{parentName:"p"},"favicon.ico")," requests - however you\ncan override this with your own."),(0,i.kt)("h2",{id:"request-variables"},"Request variables"),(0,i.kt)("p",null,"The contents of the request will be available in your handler as the variable\n",(0,i.kt)("inlineCode",{parentName:"p"},"request"),". It has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"formBody"),": the body, parsed as using form-encoding. If it cannot be parsed,\nthis will be ",(0,i.kt)("inlineCode",{parentName:"li"},"null")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jsonBody"),": the body, parsed as JSON. If it cannot be parsed, this will be\n",(0,i.kt)("inlineCode",{parentName:"li"},"null")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"body"),": the contents of either ",(0,i.kt)("inlineCode",{parentName:"li"},"jsonBody")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"formBody"),", or null if neither\nare set"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headers"),": a dictionary of all the headers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cookies"),": a dictionary of the cookies"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queryParam"),": a dictionary of the parameters in the query string (e.g.\n",(0,i.kt)("inlineCode",{parentName:"li"},"/?a=b"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url"),": the full URL of the request")),(0,i.kt)("p",null,"The request's IP address can usually be found in\n",(0,i.kt)("inlineCode",{parentName:"p"},"request.headers.x-forwarded-for"),". This is a string with multiple IP addresses,\nseparated by commas, representing the steps taken by the request as it moved\nthrough the internet. Usually, the first IP address is the one that made the\nrequest (e.g. that's your user)."),(0,i.kt)("p",null,"Other variables will be available from dynamic routing."),(0,i.kt)("h3",{id:"dynamic-routes"},"Dynamic routes"),(0,i.kt)("p",null,"Darklang support dynamic routing, by using a variable such as ",(0,i.kt)("inlineCode",{parentName:"p"},":somevar")," in a\nhandler's route. For example, handler with ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/:username")," will receive any\nrequest starting in ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/")," that has another character, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/paul"),"\n(that is, ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"/users")," will not be matched). A variable with that name\nwill be in scope - in this example ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," will be available to use in the\nhandler."),(0,i.kt)("p",null,"Incoming paths are segmented at each ",(0,i.kt)("inlineCode",{parentName:"p"},"/"),", and different variables can match each\nsegment. For example, the route ",(0,i.kt)("inlineCode",{parentName:"p"},"/:users/:username")," would match ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/paul/"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/:username/projects/:id")," would match ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/paul/projects/1"),"."),(0,i.kt)("p",null,"It is possible that a single path would match multiple handlers. In this case,\nthe most specific match will be used. For example, with the handlers\n",(0,i.kt)("inlineCode",{parentName:"p"},"/users/paul/projects/1")," would match against ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/:username/projects/:id")," as\nthat is more specific than ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/:username"),"."),(0,i.kt)("p",null,"However, if ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/:username/projects/:id")," were not present, it would match\nagainst ",(0,i.kt)("inlineCode",{parentName:"p"},"/users/:username")," (in this case, the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," would have the\nvalue ",(0,i.kt)("inlineCode",{parentName:"p"},"paul/projects/1"),"."),(0,i.kt)("p",null,"Often, you'll want to do client-side routing in a JS app. In this case you would\nset two HTTP GET handlers, with the routes ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"/:rest"),", and use them to\nrespond with your JS assets (see ",(0,i.kt)("a",{parentName:"p",href:"/how-to/static-assets"},"Static Assets"),"). You\ncan then add specific routes like ",(0,i.kt)("inlineCode",{parentName:"p"},"/changelog")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"/sitemap.xml")," which will\noverride the less specific routes. For APIs, you could add routes like\n",(0,i.kt)("inlineCode",{parentName:"p"},"/api/v1/users/:username"),", which are more specific. For an API fallback, add\n",(0,i.kt)("inlineCode",{parentName:"p"},"/api/:rest")," to return a 404 instead of responding with the JS assets."),(0,i.kt)("h2",{id:"traces"},"Traces"),(0,i.kt)("p",null,"All requests are stored as traces. Traces are automatically deleted once they\nare a week old, except the last 10 for each handler."),(0,i.kt)("h2",{id:"responses"},"Responses"),(0,i.kt)("p",null,"The result of HTTP handlers are automatically converted into HTTP responses. By\ndefault, they are converted to JSON, and returned with a content-type based on\ntheir type: records, dictionaries and lists are given the content-type\n",(0,i.kt)("inlineCode",{parentName:"p"},'"application/json; charset=utf-8"'),", all other types are given the content-type\n",(0,i.kt)("inlineCode",{parentName:"p"},'"text/plain; charset=utf-8"'),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"We recognize this is a poor choice, and future versions of the HTTP stack will\nhave better default behavior.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP::")," module provides functions to create responses to external HTTP\ncalls. Each response function, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Http::response"),", creates a response\nvalue; a response value returned by the handler will be sent as a response to\nthe client."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"HTTPResponseWith",src:n(39741).Z,width:"836",height:"292"})),(0,i.kt)("p",null,"The live value beneath the handler will show the return value."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"HTTPForbidden",src:n(94759).Z,width:"792",height:"342"})),(0,i.kt)("p",null,"To set cookies, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP::setCookie")," to create a suitable HTTP header.\n",(0,i.kt)("img",{alt:"HTTPRespondWithHeaderSetCookie",src:n(14669).Z,width:"1158",height:"302"})))}h.isMDXComponent=!0},39741:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/respondwith-bbcacc55e8fb6c9da4444164b96c980a.png"},94759:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/response-81c92fe6d3389bbcbcf3cc7f4076c380.png"},14669:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/setcookie-a2d9f016d4b1a0ff5a1fbb303a0ef6e9.png"}}]);